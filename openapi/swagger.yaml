openapi: 3.0.1
info:
  title: uniconfig
  version: latest
servers:
- url: "{basePath}"
  description: URL from parent with a basePath.
  variables:
    basePath:
      description: Base path for the URL.
      default: /rests
      enum:
      - ""
      - /rests
- url: "http://{url}:{port}{basePath}"
  description: URL built from variables.
  variables:
    basePath:
      description: Base path for the URL.
      default: ""
      enum:
      - ""
      - /rests
    url:
      description: Server URL
      default: localhost
      enum:
      - localhost
    port:
      description: Port for server connection.
      default: "8181"
      enum:
      - "8181"
paths:
  /data/cli-default-parameters:
    get:
      tags:
      - CliDefaultParameters
      - cli-topology
      parameters: []
      responses:
        "200":
          description: cli.topology.CliDefaultParameters to be added or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cli.topology.CliDefaultParameters'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
    put:
      tags:
      - CliDefaultParameters
      - cli-topology
      description: creates or updates cli.topology.CliDefaultParameters
      parameters: []
      requestBody:
        description: cli.topology.CliDefaultParameters to be added to list
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cli.topology.CliDefaultParameters'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: Object created
        "204":
          description: Object modified
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
    post:
      tags:
      - CliDefaultParameters
      - cli-topology
      description: creates cli.topology.CliDefaultParameters
      parameters: []
      requestBody:
        description: cli.topology.CliDefaultParameters to be added to list
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cli.topology.CliDefaultParameters'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: Object created
        "409":
          description: Object already exists
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
    delete:
      tags:
      - CliDefaultParameters
      - cli-topology
      description: removes cli.topology.CliDefaultParameters
      parameters: []
      responses:
        "204":
          description: Object deleted
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /data/device-id:
    get:
      tags:
      - DeviceId
      - cli-translate-registry
      parameters:
      - name: content
        in: query
        description: Type of datastore to be read.
        required: true
        style: form
        explode: true
        schema:
          type: string
          default: nonconfig
          enum:
          - nonconfig
          - config
          - all
      responses:
        "200":
          description: cli.translate.registry.DeviceId to be added or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cli.translate.registry.DeviceId'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /data/available-cli-device-translations:
    get:
      tags:
      - AvailableCliDeviceTranslations
      - cli-translate-registry
      parameters: []
      responses:
        "200":
          description: cli.translate.registry.AvailableCliDeviceTranslations to be
            added or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cli.translate.registry.AvailableCliDeviceTranslations'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
    put:
      tags:
      - AvailableCliDeviceTranslations
      - cli-translate-registry
      description: creates or updates cli.translate.registry.AvailableCliDeviceTranslations
      parameters: []
      requestBody:
        description: cli.translate.registry.AvailableCliDeviceTranslations to be added
          to list
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cli.translate.registry.AvailableCliDeviceTranslations'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: Object created
        "204":
          description: Object modified
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
    post:
      tags:
      - AvailableCliDeviceTranslations
      - cli-translate-registry
      description: creates cli.translate.registry.AvailableCliDeviceTranslations
      parameters: []
      requestBody:
        description: cli.translate.registry.AvailableCliDeviceTranslations to be added
          to list
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cli.translate.registry.AvailableCliDeviceTranslations'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: Object created
        "409":
          description: Object already exists
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
    delete:
      tags:
      - AvailableCliDeviceTranslations
      - cli-translate-registry
      description: removes cli.translate.registry.AvailableCliDeviceTranslations
      parameters: []
      responses:
        "204":
          description: Object deleted
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /data/available-cli-device-translations/available-cli-device-translation:
    get:
      tags:
      - AvailableCliDeviceTranslation
      - cli-translate-registry
      parameters: []
      responses:
        "200":
          description: cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation
            to be added or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
    put:
      tags:
      - AvailableCliDeviceTranslation
      - cli-translate-registry
      description: creates or updates cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation
      parameters: []
      requestBody:
        description: cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation
          to be added to list
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: Object created
        "204":
          description: Object modified
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
    delete:
      tags:
      - AvailableCliDeviceTranslation
      - cli-translate-registry
      description: removes cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation
      parameters: []
      responses:
        "204":
          description: Object deleted
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /data/available-cli-device-translations/available-cli-device-translation={device-type},{device-version}:
    get:
      tags:
      - AvailableCliDeviceTranslation
      - cli-translate-registry
      parameters:
      - name: device-type
        in: path
        description: Id of available-cli-device-translation
        required: true
        style: simple
        explode: false
        schema:
          type: string
          properties:
            device-type:
              type: string
      - name: device-version
        in: path
        description: Id of available-cli-device-translation
        required: true
        style: simple
        explode: false
        schema:
          type: string
          properties:
            device-version:
              type: string
      responses:
        "200":
          description: cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation
            to be added or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
    put:
      tags:
      - AvailableCliDeviceTranslation
      - cli-translate-registry
      description: creates or updates cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation
      parameters:
      - name: device-type
        in: path
        description: Id of available-cli-device-translation
        required: true
        style: simple
        explode: false
        schema:
          type: string
          properties:
            device-type:
              type: string
      - name: device-version
        in: path
        description: Id of available-cli-device-translation
        required: true
        style: simple
        explode: false
        schema:
          type: string
          properties:
            device-version:
              type: string
      requestBody:
        description: cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation
          to be added to list
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: Object created
        "204":
          description: Object modified
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
    delete:
      tags:
      - AvailableCliDeviceTranslation
      - cli-translate-registry
      description: removes cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation
      parameters:
      - name: device-type
        in: path
        description: Id of available-cli-device-translation
        required: true
        style: simple
        explode: false
        schema:
          type: string
          properties:
            device-type:
              type: string
      - name: device-version
        in: path
        description: Id of available-cli-device-translation
        required: true
        style: simple
        explode: false
        schema:
          type: string
          properties:
            device-version:
              type: string
      responses:
        "204":
          description: Object deleted
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/network-topology/topology={topology-id}/node={node-id}/yang-ext:mount/config-coverage:
    post:
      tags:
      - RPCs and Actions
      summary: Calculates coverage of the device configuration by translation units.
      operationId: "rpc_network-topology/topology={topology-id}/node={node-id}/yang-ext:mount/config-coverage"
      parameters:
      - name: topology-id
        in: path
        description: This is the model of an abstract topology. A topology contains
          nodes. Each topology MUST be identified by unique topology-id for reason
          that a network could contain many topologies.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: topology-netconf
          enum:
          - topology-netconf
          - gnmi-topology
          - uniconfig
          - templates
          - unistore
      - name: node-id
        in: path
        description: The list of network nodes defined for the topology.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/yangextmount_configcoverage_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "200":
          description: Correct response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/network-topology/topology={topology-id}/node={node-id}/yang-ext:mount/execute:
    post:
      tags:
      - RPCs and Actions
      summary: |-
        Simple execution of single or multiple commands on remote terminal. Multiple commands must be
        separated by newline in the input. After all commands are executed, the last output is not checked
        against expected output. Also, the outputs from commands are not collected - output of this RPC
        contains only status message.
      operationId: "rpc_network-topology/topology={topology-id}/node={node-id}/yang-ext:mount/execute"
      parameters:
      - name: topology-id
        in: path
        description: This is the model of an abstract topology. A topology contains
          nodes. Each topology MUST be identified by unique topology-id for reason
          that a network could contain many topologies.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: topology-netconf
          enum:
          - topology-netconf
          - gnmi-topology
          - uniconfig
          - templates
          - unistore
      - name: node-id
        in: path
        description: The list of network nodes defined for the topology.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/yangextmount_execute_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "200":
          description: Correct response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/network-topology/topology={topology-id}/node={node-id}/yang-ext:mount/execute-and-expect:
    post:
      tags:
      - RPCs and Actions
      summary: |-
        Form of the 'execute-and-read' RPC that can contain 'expect(..)' patterns used for waiting
        for specific outputs/prompts. It can be used for execution of interactive commands that require
        multiple subsequent inputs with different preceding prompts. The 'expect(..)' pattern can contain
        random Java-based regular expression typed between the brackets. Every pattern must be specified
        on the separated line and the next line cannot contain another 'expect(..)' pattern. Output of this
        RPC reflects the whole dialogue between ODL client and remote terminal except the initial
        command-prompt.
      operationId: "rpc_network-topology/topology={topology-id}/node={node-id}/yang-ext:mount/execute-and-expect"
      parameters:
      - name: topology-id
        in: path
        description: This is the model of an abstract topology. A topology contains
          nodes. Each topology MUST be identified by unique topology-id for reason
          that a network could contain many topologies.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: topology-netconf
          enum:
          - topology-netconf
          - gnmi-topology
          - uniconfig
          - templates
          - unistore
      - name: node-id
        in: path
        description: The list of network nodes defined for the topology.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/yangextmount_executeandexpect_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "200":
          description: Correct response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/network-topology/topology={topology-id}/node={node-id}/yang-ext:mount/execute-and-read:
    post:
      tags:
      - RPCs and Actions
      summary: |-
        Execution of the sequence of commands specified in the input. These commands must be separated
        by the new line - then, each of the command is executed separately. After all commands are executed,
        it is assumed, that the original command prompt (prompt that was set before execution of this RPC)
        appears on the remote terminal. If the input contains only single command, output of this RPC will
        contain only output of this command. If input contains multiple commands separated by newline, output
        of this RPC will be built from command prompts (except the prompt of the first command), input commands
        and outputs returned from remote terminal.
      operationId: "rpc_network-topology/topology={topology-id}/node={node-id}/yang-ext:mount/execute-and-read"
      parameters:
      - name: topology-id
        in: path
        description: This is the model of an abstract topology. A topology contains
          nodes. Each topology MUST be identified by unique topology-id for reason
          that a network could contain many topologies.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: topology-netconf
          enum:
          - topology-netconf
          - gnmi-topology
          - uniconfig
          - templates
          - unistore
      - name: node-id
        in: path
        description: The list of network nodes defined for the topology.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/yangextmount_executeandread_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "200":
          description: Correct response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/network-topology/topology={topology-id}/node={node-id}/yang-ext:mount/execute-and-read-until:
    post:
      tags:
      - RPCs and Actions
      summary: ""
      operationId: "rpc_network-topology/topology={topology-id}/node={node-id}/yang-ext:mount/execute-and-read-until"
      parameters:
      - name: topology-id
        in: path
        description: This is the model of an abstract topology. A topology contains
          nodes. Each topology MUST be identified by unique topology-id for reason
          that a network could contain many topologies.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: topology-netconf
          enum:
          - topology-netconf
          - gnmi-topology
          - uniconfig
          - templates
          - unistore
      - name: node-id
        in: path
        description: The list of network nodes defined for the topology.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/yangextmount_executeandreaduntil_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "200":
          description: Correct response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/dryrun-mount-node:
    post:
      tags:
      - RPCs and Actions
      summary: |-
        Mounting dryrun node from dryrun CLI/NETCONF/UNIFIED layer. This RPC completes when:
        a. dryrun mountpoint from the correspoding layer is successfully created,
        b. some failure occurs during dryrun mounting process,
        c. dryrun node has already been mounted.
      operationId: rpc_dryrun-mount-node
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_dryrunmountnode_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/check-installed-nodes:
    post:
      tags:
      - RPCs and Actions
      summary: Returns a list of all installed nodes from the node list in input.
      operationId: rpc_check-installed-nodes
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_checkinstallednodes_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "200":
          description: Correct response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_5'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/mount-node:
    post:
      tags:
      - RPCs and Actions
      summary: |-
        Mounting node into CLI/NETCONF/Unified layer depending on the input 'connection-type'.
        This RPC completes when:
        a. mountpoint on the corresponding layer is successfully created,
        b. some failure occurs during mounting process,
        c. mountpoint has already been created.
      operationId: rpc_mount-node
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_mountnode_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/install-multiple-nodes:
    post:
      tags:
      - RPCs and Actions
      summary: |-
        Installation of multiple nodes into Uniconfig database using input settings.
        This RPC completes when:
        a. node is successfully installed into Uniconfig database,
        b. installation of node fails because node cannot be mounted or configuration cannot be synced
           from device into database,
        c. node has already been installed (failure).
      operationId: rpc_install-multiple-nodes
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_installmultiplenodes_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/uninstall-multiple-nodes:
    post:
      tags:
      - RPCs and Actions
      summary: |-
        Uninstallation of multiple nodes with specific ID and connection-type from Uniconfig database.
        This RPC completes when:
        a. node is successfully removed from Uniconfig database,
        b. unistallation of node fails,
        c. node has already been uninstalled (failure).
        Warning: uninstallation process doesn't unmount node from Uniconfig instance and is not affected
        by current state of associated mountpoints.
      operationId: rpc_uninstall-multiple-nodes
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_uninstallmultiplenodes_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/connect-node:
    post:
      tags:
      - RPCs and Actions
      summary: |-
        Mounting node into CLI/NETCONF/GNMI layer or subscribing to event notifications depending on
        which topology was used when installing the node. When connecting to node for subscribing to event notifications,
        RPC doesn't wait for the connection.
        This RPC completes when:
        a. mountpoint on the corresponding layer is successfully created,
        b. some failure occurs during connecting process,
        c. mountpoint has already been connected.
      operationId: rpc_connect-node
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_connectnode_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/get-installed-nodes:
    post:
      tags:
      - RPCs and Actions
      summary: Returns list of all installed nodes or for the given mount-type.
      operationId: rpc_get-installed-nodes
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_getinstallednodes_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "200":
          description: Correct response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_6'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/disconnect-node:
    post:
      tags:
      - RPCs and Actions
      summary: |-
        Unmounting node from CLI/NETCONF/GNMI layer or unsubscribing to event notifications depending on
        which topology was used when installing the node.
        This RPC completes when:
        a. mountpoint from the correspoding layer is successfully removed,
        b. some failure occurs during disconnecting process,
        c. mountpoint has already been disconnected.
      operationId: rpc_disconnect-node
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_disconnectnode_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/dryrun-unmount-node:
    post:
      tags:
      - RPCs and Actions
      summary: |-
        Mounting dryrun node from dryrun CLI/NETCONF/UNIFIED layer. This RPC completes when:
        a. dryrun mountpoint from the correspoding layer is successfully removed,
        b. some failure occurs during dryrun unmounting process,
        c. dryrun node has already been unmounted.
      operationId: rpc_dryrun-unmount-node
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_dryrununmountnode_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/unmount-node:
    post:
      tags:
      - RPCs and Actions
      summary: |-
        Unmounting node from CLI/NETCONF/Unified layer. This RPC completes when:
        a. mountpoint from the correspoding layer is successfully removed,
        b. some failure occurs during unmounting process,
        c. node has already been unmounted.
      operationId: rpc_unmount-node
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_unmountnode_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/check-nodes-connection:
    post:
      tags:
      - RPCs and Actions
      summary: |-
        Checking nodes connection from CLI/NETCONF/gNMI/SNMP layer. This RPC will create southbound session,
        send some basic request, close the session
      operationId: rpc_check-nodes-connection
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_checknodesconnection_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/uninstall-node:
    post:
      tags:
      - RPCs and Actions
      summary: |-
        Uninstallation of node with specific ID and connection-type from Uniconfig database.
        This RPC completes when:
        a. node is successfully removed from Uniconfig database,
        b. unistallation of node fails,
        c. node has already been uninstalled (failure).
        Warning: uninstallation process doesn't unmount node from Uniconfig instance and is not affected
        by current state of associated mountpoints.
      operationId: rpc_uninstall-node
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_uninstallnode_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/install-node:
    post:
      tags:
      - RPCs and Actions
      summary: |-
        Installation of node into Uniconfig database using input settings. This RPC completes when:
        a. node is successfully installed into Uniconfig database,
        b. installation of node fails because node cannot be mounted or configuration cannot be synced
           from device into database,
        c. node has already been installed (failure).
      operationId: rpc_install-node
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_installnode_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/change-admin-state:
    post:
      tags:
      - RPCs and Actions
      summary: Change the admin-state of a specific node.
      operationId: rpc_change-admin-state
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_changeadminstate_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/change-encryption-status:
    post:
      tags:
      - RPCs and Actions
      summary: Enable or disable encryption parameter.
      operationId: rpc_change-encryption-status
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_changeencryptionstatus_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "200":
          description: Correct response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_7'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/change-encryption-keys:
    post:
      tags:
      - RPCs and Actions
      summary: Change encryption public and private keys or check rotation status.
      operationId: rpc_change-encryption-keys
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_changeencryptionkeys_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "200":
          description: Correct response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_8'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/delete-data-change-subscription:
    post:
      tags:
      - RPCs and Actions
      summary: Unregistration from data-tree change events using provided subscription-id.
      operationId: rpc_delete-data-change-subscription
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_deletedatachangesubscription_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/create-data-change-subscription:
    post:
      tags:
      - RPCs and Actions
      summary: Registration to data-tree change events under specific node and path.
      operationId: rpc_create-data-change-subscription
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_createdatachangesubscription_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "200":
          description: Correct response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_9'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/show-subscription-data:
    post:
      tags:
      - RPCs and Actions
      summary: ""
      operationId: rpc_show-subscription-data
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_showsubscriptiondata_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "200":
          description: Correct response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_10'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/discover:
    post:
      tags:
      - RPCs and Actions
      summary: |-
        RPC used for verification of reachability of network devices.
        The user can check a single IP address, in both IPv4 and IPv6
        formats, a network or a range of addresses. The ICMP protocol
        is used to check the availability of the device. The user can
        also specify a specific port (TCP or UDP) or a range of ports
        which are checked if they are open.
      operationId: rpc_discover
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_discover_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "200":
          description: Correct response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_11'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/dryrun-commit:
    post:
      tags:
      - RPCs and Actions
      summary: |-
        Simulates configuration of network elements based on
        diff between actual configuration and intended configuration.
        Cli commands are written into dryrun-journal instead of actual
        device. Return value represent cli commands for all nodes
        that have configuration pending.
      operationId: rpc_dryrun-commit
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_dryruncommit_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "200":
          description: Correct response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_12'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/set-message-types:
    post:
      tags:
      - RPCs and Actions
      summary: Set gNMI message types based on which is the content logged into audit
        logs.
      operationId: rpc_set-message-types
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_setmessagetypes_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /data/gnmi-default-parameters:
    get:
      tags:
      - GnmiDefaultParameters
      - gnmi-topology
      parameters: []
      responses:
        "200":
          description: gnmi.topology.GnmiDefaultParameters to be added or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gnmi.topology.GnmiDefaultParameters'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
    put:
      tags:
      - GnmiDefaultParameters
      - gnmi-topology
      description: creates or updates gnmi.topology.GnmiDefaultParameters
      parameters: []
      requestBody:
        description: gnmi.topology.GnmiDefaultParameters to be added to list
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/gnmi.topology.GnmiDefaultParameters'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: Object created
        "204":
          description: Object modified
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
    post:
      tags:
      - GnmiDefaultParameters
      - gnmi-topology
      description: creates gnmi.topology.GnmiDefaultParameters
      parameters: []
      requestBody:
        description: gnmi.topology.GnmiDefaultParameters to be added to list
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/gnmi.topology.GnmiDefaultParameters'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: Object created
        "409":
          description: Object already exists
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
    delete:
      tags:
      - GnmiDefaultParameters
      - gnmi-topology
      description: removes gnmi.topology.GnmiDefaultParameters
      parameters: []
      responses:
        "204":
          description: Object deleted
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /data/gnmi-default-parameters/session-timers:
    get:
      tags:
      - SessionTimers
      - gnmi-topology
      parameters: []
      responses:
        "200":
          description: gnmi.topology.sessiontimersgrouping.SessionTimers to be added
            or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gnmi.topology.sessiontimersgrouping.SessionTimers'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
    put:
      tags:
      - SessionTimers
      - gnmi-topology
      description: creates or updates gnmi.topology.sessiontimersgrouping.SessionTimers
      parameters: []
      requestBody:
        description: gnmi.topology.sessiontimersgrouping.SessionTimers to be added
          to list
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/gnmi.topology.sessiontimersgrouping.SessionTimers'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: Object created
        "204":
          description: Object modified
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
    post:
      tags:
      - SessionTimers
      - gnmi-topology
      description: creates gnmi.topology.sessiontimersgrouping.SessionTimers
      parameters: []
      requestBody:
        description: gnmi.topology.sessiontimersgrouping.SessionTimers to be added
          to list
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/gnmi.topology.sessiontimersgrouping.SessionTimers'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: Object created
        "409":
          description: Object already exists
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
    delete:
      tags:
      - SessionTimers
      - gnmi-topology
      description: removes gnmi.topology.sessiontimersgrouping.SessionTimers
      parameters: []
      responses:
        "204":
          description: Object deleted
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /data/gnmi-default-parameters/flags:
    get:
      tags:
      - Flags
      - gnmi-topology
      parameters: []
      responses:
        "200":
          description: gnmi.topology.flagsgrouping.Flags to be added or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gnmi.topology.flagsgrouping.Flags'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
    put:
      tags:
      - Flags
      - gnmi-topology
      description: creates or updates gnmi.topology.flagsgrouping.Flags
      parameters: []
      requestBody:
        description: gnmi.topology.flagsgrouping.Flags to be added to list
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/gnmi.topology.flagsgrouping.Flags'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: Object created
        "204":
          description: Object modified
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
    post:
      tags:
      - Flags
      - gnmi-topology
      description: creates gnmi.topology.flagsgrouping.Flags
      parameters: []
      requestBody:
        description: gnmi.topology.flagsgrouping.Flags to be added to list
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/gnmi.topology.flagsgrouping.Flags'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: Object created
        "409":
          description: Object already exists
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
    delete:
      tags:
      - Flags
      - gnmi-topology
      description: removes gnmi.topology.flagsgrouping.Flags
      parameters: []
      responses:
        "204":
          description: Object deleted
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /data/gnmi-default-parameters/other-parameters:
    get:
      tags:
      - OtherParameters
      - gnmi-topology
      parameters: []
      responses:
        "200":
          description: gnmi.topology.otherparametersgrouping.OtherParameters to be
            added or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gnmi.topology.otherparametersgrouping.OtherParameters'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
    put:
      tags:
      - OtherParameters
      - gnmi-topology
      description: creates or updates gnmi.topology.otherparametersgrouping.OtherParameters
      parameters: []
      requestBody:
        description: gnmi.topology.otherparametersgrouping.OtherParameters to be added
          to list
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/gnmi.topology.otherparametersgrouping.OtherParameters'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: Object created
        "204":
          description: Object modified
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
    post:
      tags:
      - OtherParameters
      - gnmi-topology
      description: creates gnmi.topology.otherparametersgrouping.OtherParameters
      parameters: []
      requestBody:
        description: gnmi.topology.otherparametersgrouping.OtherParameters to be added
          to list
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/gnmi.topology.otherparametersgrouping.OtherParameters'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: Object created
        "409":
          description: Object already exists
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
    delete:
      tags:
      - OtherParameters
      - gnmi-topology
      description: removes gnmi.topology.otherparametersgrouping.OtherParameters
      parameters: []
      responses:
        "204":
          description: Object deleted
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/upload-yang-model:
    post:
      tags:
      - RPCs and Actions
      summary: ""
      operationId: rpc_upload-yang-model
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_uploadyangmodel_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/read-journal:
    post:
      tags:
      - RPCs and Actions
      summary: ""
      operationId: rpc_read-journal
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        "200":
          description: Correct response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_13'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/clear-journal:
    post:
      tags:
      - RPCs and Actions
      summary: ""
      operationId: rpc_clear-journal
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        "200":
          description: Correct response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_14'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /data/logging-status:
    get:
      tags:
      - LoggingStatus
      - logging
      parameters:
      - name: content
        in: query
        description: Type of datastore to be read.
        required: true
        style: form
        explode: true
        schema:
          type: string
          default: nonconfig
          enum:
          - nonconfig
          - config
          - all
      responses:
        "200":
          description: logging.LoggingStatus to be added or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/logging.LoggingStatus'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /data/logging-status/global:
    get:
      tags:
      - Global
      - logging
      parameters:
      - name: content
        in: query
        description: Type of datastore to be read.
        required: true
        style: form
        explode: true
        schema:
          type: string
          default: nonconfig
          enum:
          - nonconfig
          - config
          - all
      responses:
        "200":
          description: logging.loggingstatus.Global to be added or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/logging.loggingstatus.Global'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /data/logging-status/broker:
    get:
      tags:
      - Broker
      - logging
      parameters:
      - name: content
        in: query
        description: Type of datastore to be read.
        required: true
        style: form
        explode: true
        schema:
          type: string
          default: nonconfig
          enum:
          - nonconfig
          - config
          - all
      responses:
        "200":
          description: logging.loggingstatus.Broker to be added or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/logging.loggingstatus.Broker'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /data/logging-status/broker={broker-identifier}:
    get:
      tags:
      - Broker
      - logging
      parameters:
      - name: broker-identifier
        in: path
        description: Id of broker
        required: true
        style: simple
        explode: false
        schema:
          type: string
          properties:
            broker-identifier:
              type: string
      - name: content
        in: query
        description: Type of datastore to be read.
        required: true
        style: form
        explode: true
        schema:
          type: string
          default: nonconfig
          enum:
          - nonconfig
          - config
          - all
      responses:
        "200":
          description: logging.loggingstatus.Broker to be added or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/logging.loggingstatus.Broker'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/enable-default-device-logging:
    post:
      tags:
      - RPCs and Actions
      summary: Enable logging for all devices by default.
      operationId: rpc_enable-default-device-logging
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_enabledefaultdevicelogging_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/disable-logging:
    post:
      tags:
      - RPCs and Actions
      summary: Disable logging in specified logging broker.
      operationId: rpc_disable-logging
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_disablelogging_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/set-global-hidden-types:
    post:
      tags:
      - RPCs and Actions
      summary: Set types which will be masked in output using asterisk.
      operationId: rpc_set-global-hidden-types
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_setglobalhiddentypes_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/disable-device-logging:
    post:
      tags:
      - RPCs and Actions
      summary: Disable logging for specific device.
      operationId: rpc_disable-device-logging
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_disabledevicelogging_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/disable-default-device-logging:
    post:
      tags:
      - RPCs and Actions
      summary: Disable logging for all devices by default.
      operationId: rpc_disable-default-device-logging
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_disabledefaultdevicelogging_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/enable-device-logging:
    post:
      tags:
      - RPCs and Actions
      summary: Enable logging for specific device.
      operationId: rpc_enable-device-logging
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_enabledevicelogging_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/enable-logging:
    post:
      tags:
      - RPCs and Actions
      summary: Enable logging in specified logging broker.
      operationId: rpc_enable-logging
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_enablelogging_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/add-trusted-certificate:
    post:
      tags:
      - RPCs and Actions
      summary: Add a list of trusted certificates into the keystore.
      operationId: rpc_add-trusted-certificate
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_addtrustedcertificate_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/remove-keystore-entry:
    post:
      tags:
      - RPCs and Actions
      summary: |-
        Use this rpc to remove a single or multiple keys from the datastore.
        If key with specified key-id does not exist, this RPC will do nothing and return
        successful response.
      operationId: rpc_remove-keystore-entry
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_removekeystoreentry_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/add-keystore-entry:
    post:
      tags:
      - RPCs and Actions
      summary: |-
        Use this rpc to add a single or multiple new keys into the keystore. The private key
        and passphrase will both be encrypted before they are written into the datastore.
        If key with specified key-id already exists, it will be replaced by provided key.
      operationId: rpc_add-keystore-entry
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_addkeystoreentry_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/remove-trusted-certificate:
    post:
      tags:
      - RPCs and Actions
      summary: Remove a list of trusted certificates from the datastore.
      operationId: rpc_remove-trusted-certificate
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_removetrustedcertificate_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/add-private-key:
    post:
      tags:
      - RPCs and Actions
      summary: Add a list of private keys into the keystore.
      operationId: rpc_add-private-key
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_addprivatekey_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/remove-private-key:
    post:
      tags:
      - RPCs and Actions
      summary: Remove a list of private keys from the datastore.
      operationId: rpc_remove-private-key
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_removeprivatekey_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /data/notification:
    get:
      tags:
      - Notification
      - notifications
      parameters:
      - name: content
        in: query
        description: Type of datastore to be read.
        required: true
        style: form
        explode: true
        schema:
          type: string
          default: nonconfig
          enum:
          - nonconfig
          - config
          - all
      responses:
        "200":
          description: notifications.Notification to be added or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notifications.Notification'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/create-subscription:
    post:
      tags:
      - RPCs and Actions
      summary: |-
        The command to create a notification subscription. It
        takes as argument the name of the notification stream
        and filter. Both of those options limit the content of
        the subscription. In addition, there are two time-related
        parameters, startTime and stopTime, which can be used to
        select the time interval of interest to the notification
        replay feature.
      operationId: rpc_create-subscription
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_createsubscription_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/set-hidden-http-headers:
    post:
      tags:
      - RPCs and Actions
      summary: Set hidden HTTP headers which content is hidden in the RESTCONF audit
        logs.
      operationId: rpc_set-hidden-http-headers
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_sethiddenhttpheaders_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/set-hidden-http-methods:
    post:
      tags:
      - RPCs and Actions
      summary: Set hidden HTTP methods that are not logged into RESTCONF audit logs.
      operationId: rpc_set-hidden-http-methods
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_sethiddenhttpmethods_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/register-repository:
    post:
      tags:
      - RPCs and Actions
      summary: ""
      operationId: rpc_register-repository
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_registerrepository_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "200":
          description: Correct response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_15'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /data/snapshots-metadata:
    get:
      tags:
      - SnapshotsMetadata
      - snapshot-manager
      parameters: []
      responses:
        "200":
          description: snapshot.manager.SnapshotsMetadata to be added or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/snapshot.manager.SnapshotsMetadata'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
    put:
      tags:
      - SnapshotsMetadata
      - snapshot-manager
      description: creates or updates snapshot.manager.SnapshotsMetadata
      parameters: []
      requestBody:
        description: snapshot.manager.SnapshotsMetadata to be added to list
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/snapshot.manager.SnapshotsMetadata'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: Object created
        "204":
          description: Object modified
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
    post:
      tags:
      - SnapshotsMetadata
      - snapshot-manager
      description: creates snapshot.manager.SnapshotsMetadata
      parameters: []
      requestBody:
        description: snapshot.manager.SnapshotsMetadata to be added to list
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/snapshot.manager.SnapshotsMetadata'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: Object created
        "409":
          description: Object already exists
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
    delete:
      tags:
      - SnapshotsMetadata
      - snapshot-manager
      description: removes snapshot.manager.SnapshotsMetadata
      parameters: []
      responses:
        "204":
          description: Object deleted
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /data/snapshots-metadata/snapshot:
    get:
      tags:
      - Snapshot
      - snapshot-manager
      parameters: []
      responses:
        "200":
          description: snapshot.manager.snapshotsmetadata.Snapshot to be added or
            updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/snapshot.manager.snapshotsmetadata.Snapshot'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
    put:
      tags:
      - Snapshot
      - snapshot-manager
      description: creates or updates snapshot.manager.snapshotsmetadata.Snapshot
      parameters: []
      requestBody:
        description: snapshot.manager.snapshotsmetadata.Snapshot to be added to list
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/snapshot.manager.snapshotsmetadata.Snapshot'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: Object created
        "204":
          description: Object modified
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
    delete:
      tags:
      - Snapshot
      - snapshot-manager
      description: removes snapshot.manager.snapshotsmetadata.Snapshot
      parameters: []
      responses:
        "204":
          description: Object deleted
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /data/snapshots-metadata/snapshot={name}:
    get:
      tags:
      - Snapshot
      - snapshot-manager
      parameters:
      - name: name
        in: path
        description: Id of snapshot
        required: true
        style: simple
        explode: false
        schema:
          type: string
          properties:
            name:
              type: string
      responses:
        "200":
          description: snapshot.manager.snapshotsmetadata.Snapshot to be added or
            updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/snapshot.manager.snapshotsmetadata.Snapshot'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
    put:
      tags:
      - Snapshot
      - snapshot-manager
      description: creates or updates snapshot.manager.snapshotsmetadata.Snapshot
      parameters:
      - name: name
        in: path
        description: Id of snapshot
        required: true
        style: simple
        explode: false
        schema:
          type: string
          properties:
            name:
              type: string
      requestBody:
        description: snapshot.manager.snapshotsmetadata.Snapshot to be added to list
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/snapshot.manager.snapshotsmetadata.Snapshot'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: Object created
        "204":
          description: Object modified
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
    delete:
      tags:
      - Snapshot
      - snapshot-manager
      description: removes snapshot.manager.snapshotsmetadata.Snapshot
      parameters:
      - name: name
        in: path
        description: Id of snapshot
        required: true
        style: simple
        explode: false
        schema:
          type: string
          properties:
            name:
              type: string
      responses:
        "204":
          description: Object deleted
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/delete-snapshot:
    post:
      tags:
      - RPCs and Actions
      summary: |-
        Deletes existing network-topology with the given name
        as a snapshot.
      operationId: rpc_delete-snapshot
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_deletesnapshot_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/create-snapshot:
    post:
      tags:
      - RPCs and Actions
      summary: |-
        Creates new network-topology with the given name
        as a snapshot of actual uniconfig topology.
      operationId: rpc_create-snapshot
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_createsnapshot_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/replace-config-with-snapshot:
    post:
      tags:
      - RPCs and Actions
      summary: Replaces intended uniconfig topology with a snapshot.
      operationId: rpc_replace-config-with-snapshot
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_replaceconfigwithsnapshot_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /data/subscription:
    get:
      tags:
      - Subscription
      - subscriptions
      parameters:
      - name: content
        in: query
        description: Type of datastore to be read.
        required: true
        style: form
        explode: true
        schema:
          type: string
          default: nonconfig
          enum:
          - nonconfig
          - config
          - all
      responses:
        "200":
          description: subscriptions.Subscription to be added or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subscriptions.Subscription'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /data/subscription={node-id},{stream-name}:
    get:
      tags:
      - Subscription
      - subscriptions
      parameters:
      - name: node-id
        in: path
        description: List of created subscriptions to notification streams.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          properties:
            node-id:
              type: string
      - name: stream-name
        in: path
        description: List of created subscriptions to notification streams.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          properties:
            stream-name:
              type: string
      - name: content
        in: query
        description: Type of datastore to be read.
        required: true
        style: form
        explode: true
        schema:
          type: string
          default: nonconfig
          enum:
          - nonconfig
          - config
          - all
      responses:
        "200":
          description: subscriptions.Subscription to be added or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subscriptions.Subscription'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/copy-one-to-one:
    post:
      tags:
      - RPCs and Actions
      summary: Merge or replace config between subtrees.
      operationId: rpc_copy-one-to-one
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_copyonetoone_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/calculate-subtree-diff:
    post:
      tags:
      - RPCs and Actions
      summary: Calculate diff between two YIID paths.
      operationId: rpc_calculate-subtree-diff
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_calculatesubtreediff_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "200":
          description: Correct response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_16'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/calculate-subtree-git-like-diff:
    post:
      tags:
      - RPCs and Actions
      summary: Calculate diff between two YIID paths in a git like style.
      operationId: rpc_calculate-subtree-git-like-diff
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_calculatesubtreegitlikediff_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "200":
          description: Correct response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_17'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/copy-one-to-many:
    post:
      tags:
      - RPCs and Actions
      summary: Merge or replace config between subtrees.
      operationId: rpc_copy-one-to-many
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_copyonetomany_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/copy-many-to-one:
    post:
      tags:
      - RPCs and Actions
      summary: Merge or replace config between subtrees.
      operationId: rpc_copy-many-to-one
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_copymanytoone_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/bulk-edit:
    post:
      tags:
      - RPCs and Actions
      summary: |-
        Application of multiple modifications to multiple nodes. Modifications are applied in parallel
        and same modifications are applied to all listed nodes.
      operationId: rpc_bulk-edit
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_bulkedit_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/apply-template:
    post:
      tags:
      - RPCs and Actions
      summary: RPC used for application of single template into one or multiple Uniconfig
        nodes.
      operationId: rpc_apply-template
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_applytemplate_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/upgrade-template:
    post:
      tags:
      - RPCs and Actions
      summary: RPC used for upgrading/migrating template to another version of YANG
        repository.
      operationId: rpc_upgrade-template
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_upgradetemplate_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/get-template-info:
    post:
      tags:
      - RPCs and Actions
      summary: RPC used for retrieval of information about an existing template including
        list of variables
      operationId: rpc_get-template-info
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_gettemplateinfo_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "200":
          description: Correct response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_18'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/get-template-nodes:
    post:
      tags:
      - RPCs and Actions
      summary: Returns a list of all templates.
      operationId: rpc_get-template-nodes
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        "200":
          description: Correct response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_19'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/create-multiple-templates:
    post:
      tags:
      - RPCs and Actions
      summary: RPC used for creation of multiple templates. Existing templates with
        same names are replaced.
      operationId: rpc_create-multiple-templates
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_createmultipletemplates_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /data/transactions-data:
    get:
      tags:
      - TransactionsData
      - transaction-data
      parameters:
      - name: content
        in: query
        description: Type of datastore to be read.
        required: true
        style: form
        explode: true
        schema:
          type: string
          default: nonconfig
          enum:
          - nonconfig
          - config
          - all
      responses:
        "200":
          description: transaction.data.TransactionsData to be added or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transaction.data.TransactionsData'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /data/transactions-data/transaction-data:
    get:
      tags:
      - TransactionData
      - transaction-data
      parameters:
      - name: content
        in: query
        description: Type of datastore to be read.
        required: true
        style: form
        explode: true
        schema:
          type: string
          default: nonconfig
          enum:
          - nonconfig
          - config
          - all
      responses:
        "200":
          description: transaction.data.transactionsdata.TransactionData to be added
            or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transaction.data.transactionsdata.TransactionData'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /data/transactions-data/transaction-data={transaction-id}:
    get:
      tags:
      - TransactionData
      - transaction-data
      parameters:
      - name: transaction-id
        in: path
        description: List of open transactions.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          properties:
            transaction-id:
              type: string
      - name: content
        in: query
        description: Type of datastore to be read.
        required: true
        style: form
        explode: true
        schema:
          type: string
          default: nonconfig
          enum:
          - nonconfig
          - config
          - all
      responses:
        "200":
          description: transaction.data.transactionsdata.TransactionData to be added
            or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transaction.data.transactionsdata.TransactionData'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /data/transactions-metadata:
    get:
      tags:
      - TransactionsMetadata
      - transaction-log
      parameters:
      - name: content
        in: query
        description: Type of datastore to be read.
        required: true
        style: form
        explode: true
        schema:
          type: string
          default: nonconfig
          enum:
          - nonconfig
          - config
          - all
      responses:
        "200":
          description: transaction.log.TransactionsMetadata to be added or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transaction.log.TransactionsMetadata'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /data/transactions-metadata/transaction-metadata:
    get:
      tags:
      - TransactionMetadata
      - transaction-log
      parameters:
      - name: content
        in: query
        description: Type of datastore to be read.
        required: true
        style: form
        explode: true
        schema:
          type: string
          default: nonconfig
          enum:
          - nonconfig
          - config
          - all
      responses:
        "200":
          description: transaction.log.transactionsmetadata.TransactionMetadata to
            be added or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transaction.log.transactionsmetadata.TransactionMetadata'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /data/transactions-metadata/transaction-metadata={transaction-id}:
    get:
      tags:
      - TransactionMetadata
      - transaction-log
      parameters:
      - name: transaction-id
        in: path
        description: List of transactions metadata.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          properties:
            transaction-id:
              type: string
      - name: content
        in: query
        description: Type of datastore to be read.
        required: true
        style: form
        explode: true
        schema:
          type: string
          default: nonconfig
          enum:
          - nonconfig
          - config
          - all
      responses:
        "200":
          description: transaction.log.transactionsmetadata.TransactionMetadata to
            be added or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transaction.log.transactionsmetadata.TransactionMetadata'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/revert-changes:
    post:
      tags:
      - RPCs and Actions
      summary: Revert changes by their uuid.
      operationId: rpc_revert-changes
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_revertchanges_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/sync-from-network:
    post:
      tags:
      - RPCs and Actions
      summary: Synchronises configuration from network element to given uniconfig
        node.
      operationId: rpc_sync-from-network
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_syncfromnetwork_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/close-transaction:
    post:
      tags:
      - RPCs and Actions
      summary: |-
        Closing UniConfig transaction. Identifier of the transaction must be defined in the
        Cookie header under 'UNICONFIGTXID' key. RPC does not define input and output body.
      operationId: rpc_close-transaction
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/calculate-git-like-diff:
    post:
      tags:
      - RPCs and Actions
      summary: |-
        Calculates differences between intended and actual uniconfig topology and returns
        a git like difference between those two.
      operationId: rpc_calculate-git-like-diff
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_calculategitlikediff_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "200":
          description: Correct response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_20'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/update-properties:
    post:
      tags:
      - RPCs and Actions
      summary: Update properties or add if not exists.
      operationId: rpc_update-properties
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_updateproperties_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "200":
          description: Correct response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_21'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/is-in-sync:
    post:
      tags:
      - RPCs and Actions
      summary: Checks whether information in the operational datastore is in-sync
        with the state on the device.
      operationId: rpc_is-in-sync
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_isinsync_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "200":
          description: Correct response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_22'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/sync-to-network:
    post:
      tags:
      - RPCs and Actions
      summary: Synchronises configuration from given uniconfig node to network element.
      operationId: rpc_sync-to-network
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_synctonetwork_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/create-transaction:
    post:
      tags:
      - RPCs and Actions
      summary: |-
        Creation of new UniConfig transaction. RPC does not define input body. Output contains:
        - text body with generated transaction-id,
        - Set-Cookie header with set transaction-id under 'UNICONFIGTXID' key.
        Optional query parameters:
        - 'timeout': After transaction inactivity for specified time transaction will be automatically cleaned.
        Value of this parameter is whole number and defines time in seconds.
        - 'dedicatedDeviceSession': UniConfig transaction will create dedicated session to device which is
        used only by one transaction and closed immediately after committing or closing the transaction.
        Accepted values: 'true' and 'false'.
      operationId: rpc_create-transaction
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/read-properties:
    post:
      tags:
      - RPCs and Actions
      summary: Read properties from database.
      operationId: rpc_read-properties
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_readproperties_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "200":
          description: Correct response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_23'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/health:
    post:
      tags:
      - RPCs and Actions
      summary: "Check if uniconfig is running. If DB persistance is enabled, check\
        \ DB connection too."
      operationId: rpc_health
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        "200":
          description: Correct response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_24'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/validate:
    post:
      tags:
      - RPCs and Actions
      summary: |-
        Execute validation of configuration of network elements based on
        diff between actual configuration and intended configuration.
        Result is returned in RFC output.
      operationId: rpc_validate
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_validate_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/replace-config-with-operational:
    post:
      tags:
      - RPCs and Actions
      summary: Replaces intended uniconfig topology with actual uniconfig topology.
      operationId: rpc_replace-config-with-operational
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_replaceconfigwithoperational_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/commit:
    post:
      tags:
      - RPCs and Actions
      summary: |-
        Executes configuration of network elements based on diff
        between actual configuration and intended configuration.
        If an error occurs, automatic rollback is executed.
        Result of execution is returned in RPC output.
      operationId: rpc_commit
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_commit_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "200":
          description: Correct response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_25'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/checked-commit:
    post:
      tags:
      - RPCs and Actions
      summary: |-
        Executes configuration of network elements based on
        diff between actual configuration and intended configuration.
        Before execution a fingerprint check is executed. If an error occurs,
        automatic rollback is executed. Result of execution
        is returned in RPC output.
      operationId: rpc_checked-commit
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_checkedcommit_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/calculate-diff:
    post:
      tags:
      - RPCs and Actions
      summary: Calculates differences between intended and actual uniconfig topology.
      operationId: rpc_calculate-diff
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_calculatediff_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "200":
          description: Correct response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_26'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/compare-config:
    post:
      tags:
      - RPCs and Actions
      summary: Compare configuration between CONFIG datastore and device configuration
      operationId: rpc_compare-config
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_compareconfig_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "200":
          description: Correct response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_27'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /operations/query-config:
    post:
      tags:
      - RPCs and Actions
      summary: Reads selected and filtered configuration of node using input JSON-path.
      operationId: rpc_query-config
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operations_queryconfig_body'
            encoding:
              application/json:
                contentType: application/json
                style: form
        required: true
      responses:
        "200":
          description: Correct response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_28'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        "201":
          description: No response
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /data/available-unitopo-device-translations:
    get:
      tags:
      - AvailableUnitopoDeviceTranslations
      - unitopo-translate-registry
      parameters:
      - name: content
        in: query
        description: Type of datastore to be read.
        required: true
        style: form
        explode: true
        schema:
          type: string
          default: nonconfig
          enum:
          - nonconfig
          - config
          - all
      responses:
        "200":
          description: unitopo.translate.registry.AvailableUnitopoDeviceTranslations
            to be added or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unitopo.translate.registry.AvailableUnitopoDeviceTranslations'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /data/available-unitopo-device-translations/unit:
    get:
      tags:
      - Unit
      - unitopo-translate-registry
      parameters:
      - name: content
        in: query
        description: Type of datastore to be read.
        required: true
        style: form
        explode: true
        schema:
          type: string
          default: nonconfig
          enum:
          - nonconfig
          - config
          - all
      responses:
        "200":
          description: unitopo.translate.registry.availableunitopodevicetranslations.Unit
            to be added or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unitopo.translate.registry.availableunitopodevicetranslations.Unit'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
  /data/available-unitopo-device-translations/unit={id}:
    get:
      tags:
      - Unit
      - unitopo-translate-registry
      parameters:
      - name: id
        in: path
        description: Id of unit
        required: true
        style: simple
        explode: false
        schema:
          type: string
          properties:
            id:
              type: string
      - name: content
        in: query
        description: Type of datastore to be read.
        required: true
        style: form
        explode: true
        schema:
          type: string
          default: nonconfig
          enum:
          - nonconfig
          - config
          - all
      responses:
        "200":
          description: unitopo.translate.registry.availableunitopodevicetranslations.Unit
            to be added or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unitopo.translate.registry.availableunitopodevicetranslations.Unit'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
        default:
          description: Any error in range 4xx-5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ietf.restconf.errors.Errors'
              encoding:
                application/json:
                  contentType: application/json
                  style: form
components:
  schemas:
    cli.topology.CliDefaultParameters:
      properties:
        connection-establish-timeout:
          maximum: 65535
          minimum: 0
          type: integer
          description: |-
            Maximal time (in seconds) for connection establishment, if a connection attempt does
            not succeed in this time, the attempt is considered a failure
          format: uint16
        max-reconnection-attempts:
          maximum: 4294967295
          minimum: 0
          type: integer
          description: |-
            Maximum number of reconnect retries. Non positive value or null is interpreted as infinity.
            This is an optional parameter. If set, max-connection-attempts will be used only once,
            for the first connection attempts and for any subsequent disconnect-connect cycles,
            max-reconnect-attempts will be used. This enables users using different amount of reconnects
            for initial attempts vs subsequent reconnects.
          format: uint32
        max-connection-attempts-install:
          maximum: 4294967295
          minimum: 0
          type: integer
          description: |-
            Maximum number of connection attempts used during installation of device.
            Value 0 disables the limit
          format: uint32
        max-connection-attempts:
          maximum: 4294967295
          minimum: 0
          type: integer
          description: |-
            Maximum number of connection attempts before connection initialization is marked as failed.
            Value 0 disables this limit.
          format: uint32
        dry-run-journal-size:
          maximum: 65535
          minimum: 0
          type: integer
          description: |-
            Size of the DRY RUN cli mountpoint jounral. DRY RUN journal captures commands that would be
            executed when reading/writing some configuration. However the commands are not actually sent
            to the device
          format: uint16
        parsing-engine:
          $ref: '#/components/schemas/cli.topology.ParsingEngine'
        journal-level:
          $ref: '#/components/schemas/cli.topology.JournalLevel'
        journal-size:
          maximum: 65535
          minimum: 0
          type: integer
          description: |-
            Size of the cli mountpoint jounral. Journal keeps track of executed commands and makes
            them available for users/apps for debugging purposes. Value 0 disables journaling
          format: uint16
        keepalive-initial-delay:
          maximum: 65535
          minimum: 0
          type: integer
          description: ""
          format: uint16
        keepalive-delay:
          maximum: 65535
          minimum: 0
          type: integer
          description: ""
          format: uint16
        keepalive-timeout:
          maximum: 65535
          minimum: 0
          type: integer
          description: ""
          format: uint16
        command-timeout:
          maximum: 65535
          minimum: 0
          type: integer
          description: |-
            Maximal time (in seconds) for command execution, if a command cannot be executed on
            a device in this time, the execution is considered a failure
          format: uint16
        connection-lazy-timeout:
          maximum: 65535
          minimum: 0
          type: integer
          description: |-
            Maximal time (in seconds) for connection to keep alive, if no activity was detected
            in the session and the timeout has been reached, connection will be stopped
          format: uint16
      description: ""
    cli.topology.JournalLevel:
      type: string
      description: |
        Sets how much information should be stored in the journal. Command-only stores only the actual
        commands executed on device. Extended records additional information such as: transaction
        life-cycle, which handlers were invoked etc.
      enum:
      - command-only
      - extended
    cli.topology.ParsingEngine:
      type: string
      description: |
        Specification of the parsing engine that is used for parsing of the running-configuration
        and lookup for target sections in the configuration using query commands.
        * batch-parser - Running-configuration must be traversed from the beginning each time when the new
        target section must be extracted from the configuration.
        * tree-parser - Running-configuration is mapped into the tree structure before the first command
        lookup. This tree can be reused in the same transaction for faster lookup process.
        * one-line-parser - Parsing engine that uses grep function for parsing running-configuration.
      enum:
      - batch-parser
      - tree-parser
      - one-line-parser
    cli.topology.TransportTypeEnumeration:
      type: string
      description: |2+

      enum:
      - ssh
      - telnet
    cli.translate.registry.AvailableCliDeviceTranslations:
      properties:
        available-cli-device-translation:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation'
      description: ""
    cli.translate.registry.DeviceId:
      properties:
        device-type:
          type: string
          description: ""
        device-version:
          type: string
          description: ""
      description: ""
    cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation:
      properties:
        default-error-retry-patterns:
          $ref: '#/components/schemas/cli.translate.registry.errorretrypatterns.DefaultErrorRetryPatterns'
        default-commit-error-patterns:
          $ref: '#/components/schemas/cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns'
        device-type:
          type: string
          description: ""
        units:
          $ref: '#/components/schemas/cli.translate.registry.availableclidevicetranslations.availableclidevicetranslation.Units'
        default-error-patterns:
          $ref: '#/components/schemas/cli.translate.registry.errorpatterns.DefaultErrorPatterns'
        device-version:
          type: string
          description: ""
      description: ""
    cli.unit.generic.configcoverage.Input:
      properties:
        with-details:
          type: boolean
          description: Flag for determine whether output will be detailed or not.
      description: ""
    cli.unit.generic.configcoverage.Output:
      properties:
        result:
          oneOf:
          - properties:
              complex-output:
                type: array
                description: Simple output contains commands marked with '+' if it
                  is covered or '-' if not.
                items:
                  title: cli.unit.generic.configcoverage.output.result.complex.ComplexOutput
                  properties:
                    non-covered-parts:
                      type: array
                      description: ""
                      items:
                        type: string
                    command:
                      type: string
                      description: ""
                    covered:
                      type: boolean
                      description: ""
          - properties:
              simple-output:
                type: string
                description: Simple output contains commands marked with '+' if it
                  is covered or '-' if not.
      description: ""
    cli.unit.generic.execute.Input:
      required:
      - command
      properties:
        wait-for-output-timer:
          maximum: 65535
          minimum: 0
          type: integer
          description: |-
            If no output is received during this time, then execute next command.
            Commands are sent without waiting for their echo.
          format: uint16
        error-check:
          type: boolean
          description: Flag for determine whether error handling will be enabled or
            not
        command:
          type: string
          description: Input configuration snippet (one or multiple commands separated
            by newline).
      description: ""
    cli.unit.generic.execute.Output:
      required:
      - status
      properties:
        status:
          type: string
          description: Status of the executed RPC.
      description: ""
    cli.unit.generic.executeandexpect.Input:
      required:
      - command
      properties:
        wait-for-output-timer:
          maximum: 65535
          minimum: 0
          type: integer
          description: |-
            If no output is received during this time, then execute next command.
            Commands are sent without waiting for their echo.
          format: uint16
        error-check:
          type: boolean
          description: Flag for determine whether error handling will be enabled or
            not
        command:
          type: string
          description: Input configuration snippet (one or multiple commands separated
            by newline).
      description: ""
    cli.unit.generic.executeandexpect.Output:
      required:
      - output
      properties:
        output:
          type: string
          description: Output that is composed from the inputs/prompts/outputs of
            executed commands.
      description: ""
    cli.unit.generic.executeandread.Input:
      required:
      - command
      properties:
        wait-for-output-timer:
          maximum: 65535
          minimum: 0
          type: integer
          description: |-
            If no output is received during this time, then execute next command.
            Commands are sent without waiting for their echo.
          format: uint16
        error-check:
          type: boolean
          description: Flag for determine whether error handling will be enabled or
            not
        command:
          type: string
          description: Input configuration snippet (one or multiple commands separated
            by newline).
      description: ""
    cli.unit.generic.executeandread.Output:
      required:
      - output
      properties:
        output:
          type: string
          description: Output that is composed from the inputs/prompts/outputs of
            executed commands.
      description: ""
    cli.unit.generic.executeandreaduntil.Input:
      required:
      - command
      - last-output
      properties:
        wait-for-output-timer:
          maximum: 65535
          minimum: 0
          type: integer
          description: |-
            If no output is received during this time, then execute next command.
            Commands are sent without waiting for their echo.
          format: uint16
        error-check:
          type: boolean
          description: Flag for determine whether error handling will be enabled or
            not
        last-output:
          type: string
          description: |-
            Expected last output of the last command - it is usually name of the prompt in the
            specific configuration mode.
        command:
          type: string
          description: Input configuration snippet (one or multiple commands separated
            by newline).
      description: ""
    cli.unit.generic.executeandreaduntil.Output:
      required:
      - output
      properties:
        output:
          type: string
          description: Output that is composed from the inputs/prompts/outputs of
            executed commands.
      description: ""
    connection.manager.AdminState:
      type: string
      description: |2

        * locked - When a device is administratively locked, it is not possible
        to modify its configuration, and no changes are ever pushed
        to the device
        * unlocked - Device is assumed to be operational. All changes are attempted
        to be sent southbound. This is the default when a new device is created.
        * southbound_locked - It is possible to configure the device, but no changes are sent
        to the device. Useful admin mode when pre provisioning devices.
      enum:
      - locked
      - unlocked
      - southbound_locked
    connection.manager.ConnectionType:
      type: string
      description: |
        Type of the mountpoint that is awaited:
        a. cli - CLI mountpoint,
        b. netconf - NETCONF mountpoint,
        c. uniconfig-preferred-connection - Unified mounpoint (type of the southbound protocol
           is read from database).
        d. gnmi - gNMI mountpoint,
        e. snmp - snmp mountpoin,
        f. netconf-dryrun-connection - DRYRUN mountpoint
        g. cli-dryrun-connection - DRYRUN mountpoint
        f. gnmi-dryrun-connection - DRYRUN mountpoint
      enum:
      - cli
      - netconf
      - uniconfig-preferred-connection
      - gnmi
      - netconf-dryrun-connection
      - cli-dryrun-connection
      - snmp
      - gnmi-dryrun-connection
    connection.manager.MountType:
      type: string
      description: |
        Type of the nodes that have been installed:
        a. cli - nodes that are installed using CLI protocol,
        b. netconf - nodes that are installed using NETCONF protocol,
        c. gnmi - nodes that are installed using GNMI protocol,
        d. uniconfig-preferred-connection - nodes that are installed in the UniConfig layer
           (output may contain nodes mounted on CLI, NETCONF or GNMI protocol).
      enum:
      - cli
      - netconf
      - uniconfig-preferred-connection
      - gnmi
      - netconf-dryrun-connection
      - cli-dryrun-connection
      - snmp
      - gnmi-dryrun-connection
    connection.manager.changeadminstate.Input:
      required:
      - node-id
      properties:
        node-id:
          type: string
          description: Node identifier of CLI/NETCONF/GNMI node.
        admin-state:
          $ref: '#/components/schemas/connection.manager.AdminState'
      description: ""
    connection.manager.checkinstallednodes.Input:
      properties:
        target-nodes:
          $ref: '#/components/schemas/uniconfig.manager.targetuniconfignodesfields.TargetNodes'
      description: ""
    connection.manager.checkinstallednodes.Output:
      properties:
        node-results:
          $ref: '#/components/schemas/connection.manager.getinstallednodesoutputfields.NodeResults'
      description: ""
    connection.manager.checknodesconnection.Input:
      properties:
        connection-timeout:
          maximum: 65535
          minimum: 0
          type: integer
          description: Timeout for each health-check session to be established individually.
            Default 5 seconds.
          format: uint16
        target-nodes:
          $ref: uniconfig.manager.targetuniconfignodesfields.TargetNodes
      description: ""
    connection.manager.connectnode.Input:
      required:
      - node-id
      properties:
        between-attempts-timeout:
          maximum: 65535
          minimum: 0
          type: integer
          description: |-
            Initial timeout in seconds to wait between connection attempts.
            Will be multiplied by reconenction-attempts-multiplier with every additional attempt.
            Only supported for NETCONF nodes.
          format: uint16
        node-id:
          type: string
          description: Node identifier of CLI/NETCONF/GNMI node.
        stream-name:
          type: string
          description: Name of a stream.
        max-connection-attempts:
          maximum: 4294967295
          minimum: 0
          type: integer
          description: |-
            Maximum number of connection retries. Non positive value or null is interpreted as infinity.
            Only supported for NETCONF and CLI nodes.
          format: uint32
      description: ""
    connection.manager.disconnectnode.Input:
      required:
      - node-id
      properties:
        node-id:
          type: string
          description: Node identifier of CLI/NETCONF/GNMI node.
        stream-name:
          type: string
          description: Name of a stream.
      description: ""
    connection.manager.dryrunmountnode.Input:
      required:
      - node-id
      properties:
        node-id:
          type: string
          description: Node identifier of CLI/NETCONF/GNMI node.
        connection-type:
          $ref: '#/components/schemas/connection.manager.ConnectionType'
      description: ""
    connection.manager.dryrununmountnode.Input:
      required:
      - node-id
      properties:
        node-id:
          type: string
          description: Node identifier of CLI/NETCONF/GNMI node.
        connection-type:
          $ref: '#/components/schemas/connection.manager.ConnectionType'
      description: ""
    connection.manager.getinstallednodes.Input:
      properties:
        mount-type:
          $ref: '#/components/schemas/connection.manager.MountType'
      description: ""
    connection.manager.getinstallednodes.Output:
      properties:
        node-results:
          $ref: connection.manager.getinstallednodesoutputfields.NodeResults
      description: ""
    connection.manager.installmultiplenodes.Input:
      properties:
        nodes:
          type: array
          description: ""
          items:
            $ref: connection.manager.installmultiplenodes.input.Nodes
      description: ""
    connection.manager.installnode.Input:
      required:
      - node-id
      properties:
        node-id:
          type: string
          description: Node identifier of CLI/NETCONF/GNMI node.
        cli:
          $ref: '#/components/schemas/connection.manager.installnode.input.Cli'
        netconf:
          $ref: '#/components/schemas/connection.manager.installnode.input.Netconf'
        gnmi:
          $ref: '#/components/schemas/connection.manager.installnode.input.Gnmi'
        snmp:
          $ref: '#/components/schemas/connection.manager.installnode.input.Snmp'
      description: ""
    connection.manager.mountnode.Input:
      required:
      - node-id
      properties:
        node-id:
          type: string
          description: Node identifier of CLI/NETCONF/GNMI node.
        connection-type:
          $ref: '#/components/schemas/connection.manager.ConnectionType'
      description: ""
    connection.manager.uninstallmultiplenodes.Input:
      properties:
        nodes:
          type: array
          description: ""
          items:
            $ref: connection.manager.uninstallmultiplenodesinputfields.Nodes
      description: ""
    connection.manager.uninstallnode.Input:
      required:
      - node-id
      properties:
        node-id:
          type: string
          description: Node identifier of CLI/NETCONF/GNMI node.
        connection-type:
          $ref: '#/components/schemas/connection.manager.ConnectionType'
      description: ""
    connection.manager.unmountnode.Input:
      required:
      - node-id
      properties:
        node-id:
          type: string
          description: Node identifier of CLI/NETCONF/GNMI node.
        connection-type:
          $ref: '#/components/schemas/connection.manager.ConnectionType'
      description: ""
    crypto.NewEncryptionCipherType:
      type: string
      description: |
        New algorithm that will be used to generation of public key.
      enum:
      - RSA
      - CURVE25519
      - ECDSA
    crypto.changeencryptionkeys.Input:
      properties:
        new-decryption-private-key:
          type: string
          description: New private key that will be used to decryption of confidential
            data stored in database.
        new-encryption-cipher-type:
          $ref: '#/components/schemas/crypto.NewEncryptionCipherType'
        new-encryption-public-key:
          type: string
          description: New public key that will be used to encryption of selected
            leaves in configuration.
      description: ""
    crypto.changeencryptionkeys.Output:
      required:
      - need-rotation-of-encryption-certificate
      properties:
        need-rotation-of-encryption-certificate:
          type: boolean
          description: Requiring the rotation of the encryption certificate after
            changing encryption keys (true or false).
      description: ""
    crypto.changeencryptionstatus.Input:
      required:
      - encryption-enabled
      properties:
        encryption-enabled:
          type: boolean
          description: Is encryption enabled.
      description: ""
    crypto.changeencryptionstatus.Output:
      properties:
        encryption-enabled-actual-status:
          type: boolean
          description: Actual encryption enabled status (true or false).
      description: ""
    data.change.events.DataChangeScope:
      type: string
      description: |
        Scope of detected data-tree change events under specified path.
        * BASE - Represents only a direct change of the node, such as replacement of a node,
        addition or deletion.
        * ONE - Represent a change (addition, replacement, or deletion) of the node or one
        of its direct children.
        * SUBTREE - Represents a change of the node or any of or any of its child nodes, direct and nested.
        This scope is superset of ONE and BASE.
      enum:
      - BASE
      - ONE
      - SUBTREE
    data.change.events.createdatachangesubscription.Input:
      required:
      - subtree-path
      - topology-id
      properties:
        subtree-path:
          type: string
          description: Identifier of the subtree in the data-tree expressed as relative
            path.
        node-id:
          type: string
          description: Identifier of 'network-topology/topology/node' list entry.
        data-change-scope:
          $ref: '#/components/schemas/data.change.events.DataChangeScope'
        topology-id:
          type: string
          description: Identifier of 'network-topology/topology' list entry.
      description: ""
    data.change.events.createdatachangesubscription.Output:
      required:
      - subscription-id
      properties:
        subscription-id:
          type: string
          description: Unique identifier of the subscription.
      description: ""
    data.change.events.deletedatachangesubscription.Input:
      required:
      - subscription-id
      properties:
        subscription-id:
          type: string
          description: Unique identifier of the subscription.
      description: ""
    data.change.events.showsubscriptiondata.Input:
      required:
      - subscription-id
      properties:
        subscription-id:
          type: string
          description: Unique identifier of the subscription.
      description: ""
    data.change.events.showsubscriptiondata.Output:
      required:
      - subtree-path
      - topology-id
      properties:
        subtree-path:
          type: string
          description: Identifier of the subtree in the data-tree expressed as relative
            path.
        node-id:
          type: string
          description: Identifier of 'network-topology/topology/node' list entry.
        data-change-scope:
          $ref: '#/components/schemas/data.change.events.DataChangeScope'
        topology-id:
          type: string
          description: Identifier of 'network-topology/topology' list entry.
      description: ""
    device.discovery.discover.Input:
      properties:
        verify-host-reachability:
          type: boolean
          description: Check whether the host is reachable or not using ICMP protocol
        tcp-port:
          type: array
          description: ""
          items:
            $ref: device.discovery.inputport.TcpPort
        address:
          type: array
          description: ""
          items:
            $ref: device.discovery.inputaddress.Address
        udp-port:
          type: array
          description: ""
          items:
            $ref: device.discovery.inputport.UdpPort
      description: ""
    device.discovery.discover.Output:
      properties:
        device:
          type: array
          description: ""
          items:
            $ref: device.discovery.discoveryoutputfields.Device
      description: ""
    dryrun.manager.dryruncommit.Input:
      properties:
        do-rollback:
          type: boolean
          description: |-
            Controls whether to roll back successfully configured devices in case of failure.
            Applies when configuring multiple devices within a single COMMIT RPC.
            By default, if N devices succeed, but the N+1 device fails,
            those N devices will be rolled back unless this option is set to false.
            The N+1 device will always be rolled back regardless of this option.
      description: ""
    dryrun.manager.dryruncommit.Output:
      properties:
        node-results:
          $ref: '#/components/schemas/dryrun.manager.dryruncommitoutputfields.NodeResults'
      description: ""
    frinx.types.DataTreeOperation:
      type: string
      description: |
        The datastore operation requested for the associated 'edit' entry.
        * merge - The supplied value is merged with the target data node.
        * replace - The supplied value is used to replace the target data node.
        * remove - Delete the target node if it currently exists.
      enum:
      - merge
      - replace
      - remove
    gnmi.logging.GnmiMessageType:
      type: string
      description: |
        List of gNMI message types, based on which the broker will log the message content.
        Names of the gNMI message types are not case-sensitive.
      enum:
      - GET
      - SET
    gnmi.logging.setmessagetypes.Input:
      properties:
        message-types:
          type: array
          description: |-
            List of gNMI message types, based on which the broker will log the message content.
            Names of the gNMI message types are not case-sensitive.
          items:
            $ref: '#/components/schemas/gnmi.logging.GnmiMessageType'
      description: ""
    gnmi.topology.ConnectionTypeEnumeration:
      type: string
      description: |2+

      enum:
      - PLAINTEXT
      - INSECURE
    gnmi.topology.GnmiDefaultParameters:
      properties:
        flags:
          $ref: '#/components/schemas/gnmi.topology.flagsgrouping.Flags'
        other-parameters:
          $ref: '#/components/schemas/gnmi.topology.otherparametersgrouping.OtherParameters'
        session-timers:
          $ref: '#/components/schemas/gnmi.topology.sessiontimersgrouping.SessionTimers'
      description: ""
    gnmi.topology.flagsgrouping.Flags:
      properties:
        enabled-notifications:
          type: boolean
          description: |-
            If it is set to 'true' and GNMI device supports notifications, GNMI mountpoint will
            expose GNMI notification and subscription services.
      description: ""
    gnmi.topology.otherparametersgrouping.OtherParameters:
      properties:
        dry-run-journal-size:
          maximum: 65535
          minimum: 0
          type: integer
          description: |-
            Size of the DRY RUN gnmi mountpoint journal. DRY RUN journal captures gnmi operations that
            would be executed when reading/writing some configuration. However the operations are not actually
            sent to the device
          format: uint16
      description: ""
    gnmi.topology.sessiontimersgrouping.SessionTimers:
      properties:
        request-timeout:
          maximum: 65535
          minimum: 0
          type: integer
          description: Timeout for each gnmi request. Request times out if not completed
            in X seconds.
          format: uint16
        request-max-size:
          maximum: 33554432
          minimum: 0
          type: integer
          description: |-
            The maximum size of a request in bytes. The maximum size of this leaf is
            32 mebibytes (33554432).
          format: uint32
        internal-transaction-timeout:
          maximum: 65535
          minimum: 0
          type: integer
          description: |-
            Timeout for internal data broker transactions (Not uniconfig transaction).
            Transaction times out if not completed in X seconds.
          format: uint16
      description: ""
    gnmi.yang.storage.uploadyangmodel.Input:
      properties:
        name:
          type: string
          description: Name of the yang model
        body:
          type: string
          description: Body of the yang model
        version:
          type: string
          description: Version of the yang model
      description: ""
    ietf.restconf.ErrorTagEnumeration:
      type: string
      description: |
        The enumerated error-tag.
        * bad-attribute - 400 - Bad Request - Bad Attribute
        * bad-element - 400 - Bad Request - Bad Element
        * invalid-value - 400 - Bad Request - Invalid Value
        * malformed-message - 400 - Bad Request - Malformed Message
        * missing-attribute - 400 - Bad Request - Missing Attribute
        * missing-element - 400 - Bad Request - Missing Element
        * unknown-attribute - 400 - Bad Request - Unknown Attribute
        * unknown-element - 400 - Bad Request - Unknown Element
        * unknown-namespace - 400 - Bad Request - Unknown Namespace
        * access-denied - 403 - Forbidden - Access Denied
        * data-missing - 404 - Resource Not Found - Data Missing
        * data-exists - 409 - Conflict - Data Exists
        * in-use - 409 - Conflict - In Use
        * lock-denied - 409 - Conflict - Lock Denied
        * resource-denied - 409 - Conflict - Resource Denied
        * too-big - 413 - Request Entity Too Large - Too Big
        * invalid-transaction - 422 - Unprocessable Entity - Invalid Transaction
        * operation-failed - 500 - Internal Server Error - Operation Failed
        * partial-operation - 500 - Internal Server Error - Partial Operation
        * rollback-failed - 500 - Internal Server Error - Rollback Failed
        * validation-failed - 500 - Internal Server Error - Validation Failed
        * operation-not-supported - 501 - Not Implemented - Operation Not Supported
        * resource-denied-transport - 503 - Service Unavailable - Resource Denied Transport
        * southbound-context-error - 500 - Internal Server Error - Southbound Context Error
        * southbound-authentication-failed - 500 - Internal Server Error - Southbound Authentication Failed
        * southbound-protocol-error - 500 - Internal Server Error - Southbound Protocol Error
        * southbound-no-connection - 502 - Bad Gateway - Southbound No Connection
        * southbound-connection-refused - 502 - Bad Gateway - Southbound Connection Refused
        * southbound-connection-timeout - 504 - Gateway Timeout - Southbound Connection Timeout
        * southbound-rpc-timeout - 504 - Gateway Timeout - Southbound RPC Timeout
      enum:
      - bad-attribute
      - bad-element
      - invalid-value
      - malformed-message
      - missing-attribute
      - missing-element
      - unknown-attribute
      - unknown-element
      - unknown-namespace
      - access-denied
      - data-missing
      - data-exists
      - in-use
      - lock-denied
      - resource-denied
      - too-big
      - invalid-transaction
      - operation-failed
      - partial-operation
      - rollback-failed
      - validation-failed
      - operation-not-supported
      - resource-denied-transport
      - southbound-context-error
      - southbound-authentication-failed
      - southbound-protocol-error
      - southbound-no-connection
      - southbound-connection-refused
      - southbound-connection-timeout
      - southbound-rpc-timeout
    ietf.restconf.ErrorTypeEnumeration:
      type: string
      description: |
        The protocol layer where the error occurred.
        * transport - The transport layer.
        * rpc - The rpc or notification layer.
        * protocol - The protocol operation layer.
        * application - The server application layer.
      enum:
      - transport
      - rpc
      - protocol
      - application
    ietf.restconf.errors.Errors:
      properties:
        error:
          type: array
          description: |-
            An entry containing information about one
            specific error that occurred while processing
            a RESTCONF request. REF:RFC 6241, Section 4.3.
          items:
            $ref: ietf.restconf.errors.errors.Error
      description: |-
        Represents an error report returned by the server if
        a request results in an error.
    journal.clearjournal.Output:
      properties:
        journal:
          type: string
          description: ""
      description: ""
    journal.readjournal.Output:
      properties:
        journal:
          type: string
          description: ""
      description: ""
    logging.LoggingStatus:
      properties:
        broker:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/logging.loggingstatus.Broker'
        global:
          $ref: '#/components/schemas/logging.loggingstatus.Global'
      description: ""
    logging.disabledefaultdevicelogging.Input:
      required:
      - broker-identifier
      properties:
        broker-identifier:
          type: string
          description: Logging broker identifier.
      description: ""
    logging.disabledevicelogging.Input:
      required:
      - broker-identifier
      properties:
        device-list:
          type: array
          description: List of devices.
          items:
            type: string
        broker-identifier:
          type: string
          description: Logging broker identifier.
      description: ""
    logging.disablelogging.Input:
      required:
      - broker-identifier
      properties:
        broker-identifier:
          type: string
          description: Logging broker identifier.
      description: ""
    logging.enabledefaultdevicelogging.Input:
      required:
      - broker-identifier
      properties:
        broker-identifier:
          type: string
          description: Logging broker identifier.
      description: ""
    logging.enabledevicelogging.Input:
      required:
      - broker-identifier
      properties:
        device-list:
          type: array
          description: List of devices.
          items:
            type: string
        broker-identifier:
          type: string
          description: Logging broker identifier.
      description: ""
    logging.enablelogging.Input:
      required:
      - broker-identifier
      properties:
        broker-identifier:
          type: string
          description: Logging broker identifier.
      description: ""
    logging.loggingstatus.Broker:
      required:
      - broker-identifier
      - logging-broker-enabled
      properties:
        restconf-logging:hidden-http-headers:
          type: array
          description: |-
            List of HTTP headers (names of the headers) which content is hidden in the logs.
            Names of the HTTP headers are not case-sensitive.
          items:
            type: string
        enabled-devices:
          type: array
          description: |-
            List of nodes for which the logging is enabled. This list has effect only if
            'is-logging-enabled-on-all-devices' is set to 'false'.
          items:
            type: string
        restconf-logging:hidden-http-methods:
          type: array
          description: |-
            HTTP requests (and associated HTTP responses) are not logged if request's HTTP method is set
            to one of the methods in this list.
          items:
            $ref: '#/components/schemas/restconf.logging.HttpMethod'
        broker-identifier:
          type: string
          description: Logging broker identifier.
        gnmi-logging:message-types:
          type: array
          description: |-
            List of gNMI message types, based on which the broker will log the message content.
            Names of the gNMI message types are not case-sensitive.
          items:
            $ref: '#/components/schemas/gnmi.logging.GnmiMessageType'
        logging-broker-enabled:
          type: boolean
          description: Enabled/Disabled logging on specific logging broker.
        logging-enabled-on-all-devices:
          type: boolean
          description: Enabled/Disabled logging on all devices (default behaviour).
      description: ""
    logging.loggingstatus.Global:
      properties:
        hidden-types:
          type: array
          description: Types filtered and hidden at logger output.
          items:
            type: string
      description: Global settings applied to all logging brokers and devices.
    logging.setglobalhiddentypes.Input:
      properties:
        hidden-types:
          type: array
          description: Types filtered and hidden at logger output.
          items:
            type: string
      description: ""
    netconf.keystore.addkeystoreentry.Input:
      properties:
        key-credential:
          type: array
          description: ""
          items:
            $ref: netconf.keystore.keystoreentry.KeyCredential
      description: ""
    netconf.keystore.addprivatekey.Input:
      properties:
        private-key:
          type: array
          description: A private key.
          items:
            $ref: netconf.keystore.privatekeys.PrivateKey
      description: ""
    netconf.keystore.addtrustedcertificate.Input:
      properties:
        trusted-certificate:
          type: array
          description: |-
            A list of trusted certificate. These cerfitifcates can be used by a server to
            authenticate clients, or by clients to authenticate servers.
          items:
            $ref: netconf.keystore.trustedcertificates.TrustedCertificate
      description: ""
    netconf.keystore.removekeystoreentry.Input:
      properties:
        key-id:
          type: array
          description: ""
          items:
            type: string
      description: ""
    netconf.keystore.removeprivatekey.Input:
      properties:
        name:
          type: array
          description: ""
          items:
            type: string
      description: ""
    netconf.keystore.removetrustedcertificate.Input:
      properties:
        name:
          type: array
          description: ""
          items:
            type: string
      description: ""
    netconf.node.topology.EditConfigTestOption:
      type: string
      description: |
        Specification of the test-option parameter in the netconf edit-config message.
        Possible values are 'set', 'test-then-set' or 'test-only'. If the edit-config-test-option is not
        explicitly specified in the mount request, then the default value will be used ('test-then-set').
      enum:
      - set
      - test-only
      - test-then-set
    notifications.Notification:
      required:
      - body
      - event-time
      - identifier
      - node-id
      - stream-name
      properties:
        node-id:
          type: string
          description: Identifier of the node which publishes notifications via stream.
        identifier:
          type: string
          description: Notification identifier.
        event-time:
          type: string
          description: The time the event was generated by the event source.
        body:
          type: string
          description: Notification body converted to json format.
        stream-name:
          type: string
          description: Identifier of the notification stream.
      description: ""
    notifications.createsubscription.Input:
      properties:
        filter:
          type: string
          description: |-
            An optional parameter that indicates which subset of all
            possible events is of interest. The format of this
            parameter is the same as that of the filter parameter
            in the NETCONF protocol operations. If not present,
            all events not precluded by other parameters will
            be sent.
        stopTime:
          type: string
          description: |-
            An optional parameter used with the optional replay
            feature to indicate the newest notifications of
            interest. If stop time is not present, the notifications
            will continue until the subscription is terminated.
            Must be used with startTime.
        startTime:
          type: string
          description: |-
            A parameter used to trigger the replay feature and
            indicates that the replay should start at the time
            specified. If start time is not present, this is not a
            replay subscription.
        stream:
          type: string
          description: |-
            An optional parameter that indicates which stream of events
            is of interest. If not present, then events in the default
            NETCONF stream will be sent.
      description: ""
    restconf.logging.HttpMethod:
      type: string
      description: |
        HTTP requests (and associated HTTP responses) are not logged if request's HTTP method is set
        to one of the methods in this list.
      enum:
      - GET
      - HEAD
      - POST
      - PUT
      - DELETE
      - TRACE
      - OPTIONS
      - CONNECT
      - PATCH
    restconf.logging.sethiddenhttpheaders.Input:
      properties:
        hidden-http-headers:
          type: array
          description: |-
            List of HTTP headers (names of the headers) which content is hidden in the logs.
            Names of the HTTP headers are not case-sensitive.
          items:
            type: string
      description: ""
    restconf.logging.sethiddenhttpmethods.Input:
      properties:
        hidden-http-methods:
          type: array
          description: |-
            HTTP requests (and associated HTTP responses) are not logged if request's HTTP method is set
            to one of the methods in this list.
          items:
            $ref: '#/components/schemas/restconf.logging.HttpMethod'
      description: ""
    schema.resources.RepositoryCreationStatus:
      type: string
      description: |
        Status of the repository registration.
        * success - Repository has been successfully created and verified by building of schema context.
        * failed - Repository cannot be created due to the error (schema context cannot be build).
      enum:
      - success
      - failed
    schema.resources.registerrepository.Input:
      properties:
        repository-name:
          type: string
          description: Name of the schema repository / directory that is used for
            persistence of YANG artifacts.
      description: ""
    schema.resources.registerrepository.Output:
      required:
      - status
      properties:
        error-message:
          type: string
          description: The cause of the failure.
        status:
          $ref: '#/components/schemas/schema.resources.RepositoryCreationStatus'
      description: ""
    snapshot.manager.SnapshotsMetadata:
      properties:
        snapshot:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/snapshot.manager.snapshotsmetadata.Snapshot'
      description: ""
    snapshot.manager.createsnapshot.Input:
      properties:
        name:
          type: string
          description: Name of snapshot.
        target-nodes:
          $ref: uniconfig.manager.targetuniconfignodesfields.TargetNodes
      description: ""
    snapshot.manager.deletesnapshot.Input:
      properties:
        name:
          type: string
          description: Name of snapshot.
      description: ""
    snapshot.manager.replaceconfigwithsnapshot.Input:
      properties:
        name:
          type: string
          description: Name of snapshot.
        target-nodes:
          $ref: uniconfig.manager.targetuniconfignodesfields.TargetNodes
      description: ""
    snapshot.manager.snapshotsmetadata.Snapshot:
      properties:
        name:
          type: string
          description: Name of snapshot.
        nodes:
          type: array
          description: List of nodes that are part of the snapshot.
          items:
            type: string
        creation-time:
          type: string
          description: Time when the snapshot was created
      description: ""
    snmp.topology.AuthenticationProtocolEnumeration:
      type: string
      description: |
        The authentication protocol that will be used when the security
        model is set to authNoPriv or authPriv.
      enum:
      - MD5
      - SHA-1
      - SHA-224
      - SHA-256
      - SHA-384
      - SHA-512
    snmp.topology.PrivacyProtocolEnumeration:
      type: string
      description: |
        The privacy protocol that will be used when the security model is set to authPriv
      enum:
      - DES
      - 3DES
      - AES-128
      - AES-192
      - AES-256
      - AES-192-3DESkeyext
      - AES-256-3DESkeyext
    snmp.topology.SnmpVersionEnumeration:
      type: string
      description: |
        The SNMP version.
      enum:
      - v1
      - v2c
      - v3
    snmp.topology.TransportTypeEnumeration:
      type: string
      description: |
        The transport mapping.
      enum:
      - udp
      - tcp
    subscriptions.ModeEnum:
      type: string
      description: |
        Subscription mode for gnmi streaming
      enum:
      - SAMPLE
      - ON_CHANGE
      - TARGET_DEFINED
    subscriptions.Subscription:
      required:
      - creation-time
      - node-id
      - stream-name
      - topology-id
      properties:
        mode:
          $ref: '#/components/schemas/subscriptions.ModeEnum'
        stop-time:
          type: string
          description: |-
            RFC5277: An optional parameter, <stopTime>, used with the optional replay feature to indicate the newest
            notifications of interest. If <stopTime> is not present, the notifications will continue until the
            subscription is terminated. Must be used with and be later than <startTime>. Values of <stopTime>
            in the future are valid.
        node-id:
          type: string
          description: Identifier of the node which publishes notifications via stream.
        start-time:
          type: string
          description: |-
            RFC5277: A parameter, <startTime>, used to trigger the replay feature and indicate that the replay
            should start at the time specified. If <startTime> is not present, this is not a replay subscription.
            It is not valid to specify start times that are later than the current time. If the <startTime> specified
            is earlier than the log can support, the replay will begin with the earliest available notification.
        topology-id:
          type: string
          description: Topology identifier.
        stream-name:
          type: string
          description: Identifier of the notification stream.
        paths:
          type: array
          description: Paths to which subscribe on data change events
          items:
            type: string
        creation-time:
          type: string
          description: Time when subscription has been created.
        uniconfig-instance:
          type: string
          description: Identifier of the UniConfig instance which currently maintains
            subscription to stream.
      description: List of created subscriptions to notification streams.
    subtree.manager.Datastore:
      type: string
      description: |
        Source datastore.
        * CONFIGURATION - Configuration datastore.
        * OPERATIONAL - Operational datastore.
      enum:
      - CONFIGURATION
      - OPERATIONAL
    subtree.manager.Operation:
      type: string
      description: |
        Type of operation: merge, replace.
        * merge - Merge operation.
        * replace - Replace operation.
      enum:
      - merge
      - replace
    subtree.manager.SourceDatastore:
      type: string
      description: |
        Source data-store type.
        * CONFIGURATION - Configuration datastore.
        * OPERATIONAL - Operational datastore.
      enum:
      - CONFIGURATION
      - OPERATIONAL
    subtree.manager.TargetDatastore:
      type: string
      description: |
        Target data-store type.
        * CONFIGURATION - Configuration datastore.
        * OPERATIONAL - Operational datastore.
      enum:
      - CONFIGURATION
      - OPERATIONAL
    subtree.manager.bulkedit.Input:
      required:
      - topology-id
      properties:
        node-id:
          type: array
          description: List of nodes representing target nodes for list of modifications.
          items:
            type: string
        edit:
          type: array
          description: List of intended modifications.
          items:
            $ref: subtree.manager.bulkeditinputfields.Edit
        topology-id:
          type: string
          description: Identifier of the topology which contains target nodes.
      description: ""
    subtree.manager.calculatesubtreediff.Input:
      required:
      - source-path
      - target-path
      properties:
        source-datastore:
          $ref: '#/components/schemas/subtree.manager.SourceDatastore'
        target-datastore:
          $ref: '#/components/schemas/subtree.manager.TargetDatastore'
        target-path:
          type: string
          description: Target path YIID.
        source-path:
          type: string
          description: Source path YIID.
      description: ""
    subtree.manager.calculatesubtreediff.Output:
      properties:
        updated-data:
          type: array
          description: Updated intended configuration against actual.
          items:
            $ref: subtree.manager.updateddata.UpdatedData
        deleted-data:
          type: array
          description: Removed intended configuration against actual.
          items:
            $ref: subtree.manager.deleteddata.DeletedData
        created-data:
          type: array
          description: Created intended configuration against actual.
          items:
            $ref: subtree.manager.createddata.CreatedData
      description: ""
    subtree.manager.calculatesubtreegitlikediff.Input:
      required:
      - source-path
      - target-path
      properties:
        source-datastore:
          $ref: '#/components/schemas/subtree.manager.SourceDatastore'
        target-datastore:
          $ref: '#/components/schemas/subtree.manager.TargetDatastore'
        target-path:
          type: string
          description: Target path YIID.
        source-path:
          type: string
          description: Source path YIID.
      description: ""
    subtree.manager.calculatesubtreegitlikediff.Output:
      properties:
        changes:
          type: array
          description: Result of diff between source and target YIID paths in a git
            like style.
          items:
            type: string
      description: ""
    subtree.manager.copymanytoone.Input:
      properties:
        source-paths:
          type: array
          description: Source paths to data which is put/merged under target nodes.
          items:
            type: string
        source-datastore:
          $ref: '#/components/schemas/subtree.manager.Datastore'
        target-datastore:
          $ref: '#/components/schemas/subtree.manager.Datastore'
        target-path:
          type: string
          description: Target path under which data from source paths is put/merged.
        operation:
          $ref: '#/components/schemas/subtree.manager.Operation'
      description: ""
    subtree.manager.copyonetomany.Input:
      properties:
        source-datastore:
          $ref: '#/components/schemas/subtree.manager.Datastore'
        target-datastore:
          $ref: '#/components/schemas/subtree.manager.Datastore'
        target-paths:
          type: array
          description: Target paths under which data from source paths is put/merged.
          items:
            type: string
        operation:
          $ref: '#/components/schemas/subtree.manager.Operation'
        source-path:
          type: string
          description: Source path to data which is put/merged under target nodes.
      description: ""
    subtree.manager.copyonetoone.Input:
      properties:
        source-datastore:
          $ref: '#/components/schemas/subtree.manager.Datastore'
        target-datastore:
          $ref: '#/components/schemas/subtree.manager.Datastore'
        target-path:
          type: string
          description: Target path under which data from source paths is put/merged.
        operation:
          $ref: '#/components/schemas/subtree.manager.Operation'
        source-path:
          type: string
          description: Source path to data which is put/merged under target nodes.
      description: ""
    template.manager.TagIdentityref:
      type: string
      enum:
      - template-tags:delete
      - template-tags:create
      - template-tags:merge
      - template-tags:replace
      - template-tags:update
      - template-tags:operation
    template.manager.applytemplate.Input:
      required:
      - template-node-id
      properties:
        template-node-id:
          type: string
          description: Identifier of the template.
        uniconfig-node:
          type: array
          description: ""
          items:
            $ref: template.manager.applytemplateinputfields.UniconfigNode
      description: ""
    template.manager.createmultipletemplates.Input:
      properties:
        templates:
          type: array
          description: ""
          items:
            $ref: template.manager.createmultipletemplatesinputfields.Templates
        tags:
          type: array
          description: List of template tags that are additionally written into template
            configuration.
          items:
            $ref: template.manager.createmultipletemplatesinputfields.Tags
      description: ""
    template.manager.gettemplateinfo.Input:
      required:
      - template-node-id
      properties:
        template-node-id:
          type: string
          description: Identifier of the template.
      description: ""
    template.manager.gettemplateinfo.Output:
      properties:
        variables:
          $ref: '#/components/schemas/template.manager.gettemplateinfooutputfields.Variables'
      description: ""
    template.manager.gettemplatenodes.Output:
      properties:
        nodes:
          type: array
          description: List of template names.
          items:
            type: string
      description: ""
    template.manager.upgradetemplate.Input:
      required:
      - template-name
      properties:
        yang-repository:
          type: string
          description: |-
            Name of yang-repository used for upgrading of templates.
            It contains identifier of the YANG schema repository.
            Default value is latest configured YANG repository.
        upgraded-template-name:
          type: string
          description: Identifier of the upgraded template. Default value is input
            'template-name'.
        template-name:
          type: string
          description: Identifier of the template.
      description: ""
    transaction.data.TransactionsData:
      properties:
        transaction-data:
          type: array
          description: List of open transactions.
          items:
            $ref: '#/components/schemas/transaction.data.transactionsdata.TransactionData'
      description: Container for list of transactions data.
    transaction.data.transactionsdata.TransactionData:
      properties:
        transaction-id:
          type: string
          description: Transaction identifier.
        last-access-time:
          type: string
          description: Transaction last access time.
        database-connection-client-port:
          maximum: 65535
          minimum: 0
          type: integer
          description: Client TCP port of connection to database that is associated
            to this UniConfig transaction.
          format: uint16
        creation-time:
          type: string
          description: Transaction creation time.
        additional-context:
          type: string
          description: "Any text, it can be used to identify place of creation of\
            \ this transaction"
        hard-timeout:
          maximum: 2147483647
          minimum: -2147483648
          type: integer
          description: Hard timeout for this transaction
          format: int32
        idle-timeout:
          maximum: 2147483647
          minimum: -2147483648
          type: integer
          description: Idle timeout for this transaction
          format: int32
        changed-nodes:
          type: array
          description: List of changed nodes
          items:
            $ref: transaction.data.transactionsdata.transactiondata.ChangedNodes
      description: List of open transactions.
    transaction.log.StatusEnumeration:
      type: string
      description: |2+

      enum:
      - SUCCESS
      - FAILED
    transaction.log.TransactionsMetadata:
      properties:
        transaction-metadata:
          type: array
          description: List of transactions metadata.
          items:
            $ref: '#/components/schemas/transaction.log.transactionsmetadata.TransactionMetadata'
      description: Container for list of transactions metadata.
    transaction.log.revertchanges.Input:
      properties:
        ignore-non-existing-nodes:
          type: boolean
          description: |-
            Controls whether to ignore non-existing target uniconfig nodes. By default, if the
            target-uuids-fields contains a transaction id for a non-existing node, then RPC fails.
        target-transactions:
          $ref: '#/components/schemas/transaction.log.targetuuidsfields.TargetTransactions'
      description: ""
    transaction.log.transactionsmetadata.TransactionMetadata:
      required:
      - failed-commit-time
      - last-commit-time
      properties:
        transaction-id:
          type: string
          description: Transaction identifier.
        metadata:
          type: array
          description: List of changes.
          items:
            $ref: transaction.log.transactionsmetadata.transactionmetadata.Metadata
        type-of-commit-time:
          oneOf:
          - properties:
              failed-commit-time:
                type: string
                description: Date and time of when the transaction failed.
          - properties:
              last-commit-time:
                type: string
                description: Date and time of the last commit.
        status:
          $ref: '#/components/schemas/transaction.log.StatusEnumeration'
      description: List of transactions metadata.
    uniconfig.config.AdminState:
      type: string
      description: |
        Specifies the state when the device is installed.
        * locked - When a device is administratively locked, it is not possible
        to modify its configuration, and no changes are ever pushed
        to the device
        * unlocked - Device is assumed to be operational. All changes are attempted
        to be sent southbound. This is the default when a new device is created.
        * southbound_locked - It is possible to configure the device, but no changes are sent
        to the device. Useful admin mode when pre provisioning devices.
      enum:
      - locked
      - unlocked
      - southbound_locked
    uniconfig.config.PublicKeyCipherType:
      type: string
      description: |
        Algorithm used for generation of key-pair which public part is specified
        by 'public-key-path' leaf'.
      enum:
      - RSA
      - CURVE25519
      - ECDSA
    uniconfig.manager.calculatediff.Input:
      properties:
        target-nodes:
          $ref: '#/components/schemas/uniconfig.manager.targetuniconfigunistorenodesfields.TargetNodes'
      description: ""
    uniconfig.manager.calculatediff.Output:
      properties:
        node-results:
          $ref: '#/components/schemas/uniconfig.manager.calculatediffoutputfields.NodeResults'
      description: ""
    uniconfig.manager.calculategitlikediff.Input:
      properties:
        target-nodes:
          $ref: uniconfig.manager.targetuniconfigunistorenodesfields.TargetNodes
      description: ""
    uniconfig.manager.calculategitlikediff.Output:
      properties:
        node-results:
          $ref: '#/components/schemas/uniconfig.manager.calculategitlikediffoutputfields.NodeResults'
      description: ""
    uniconfig.manager.checkedcommit.Input:
      properties:
        do-rollback:
          type: boolean
          description: |-
            Controls whether to roll back successfully configured devices in case of failure.
            Applies when configuring multiple devices within a single COMMIT RPC.
            By default, if N devices succeed, but the N+1 device fails,
            those N devices will be rolled back unless this option is set to false.
            The N+1 device will always be rolled back regardless of this option.
      description: ""
    uniconfig.manager.commit.Input:
      properties:
        do-confirmed-commit:
          type: boolean
          description: Option to enable/disable confirmed-commit at commit. Default
            value is true - confirmed-commit
        do-rollback:
          type: boolean
          description: |-
            Controls whether to roll back successfully configured devices in case of failure.
            Applies when configuring multiple devices within a single COMMIT RPC.
            By default, if N devices succeed, but the N+1 device fails,
            those N devices will be rolled back unless this option is set to false.
            The N+1 device will always be rolled back regardless of this option.
        skip-unreachable-nodes:
          type: boolean
          description: "Option to skip nodes, that are unreachable at the time of\
            \ commit. Other nodes will be committed"
        do-validate:
          type: boolean
          description: Option to enable/disable validation at commit. Default value
            is true - validate
      description: ""
    uniconfig.manager.commit.Output:
      properties:
        unreachable-nodes:
          type: array
          description: List of unreachable node identifiers.
          items:
            type: string
      description: ""
    uniconfig.manager.compareconfig.Input:
      properties:
        check-timestamp:
          type: boolean
          description: |-
            Perform timestamp comparison(last known to Uniconfig vs current timestamp on device)
            before loading all configuration from a device.
        target-nodes:
          $ref: uniconfig.manager.targetuniconfigunistorenodesfields.TargetNodes
      description: ""
    uniconfig.manager.compareconfig.Output:
      properties:
        node-results:
          $ref: '#/components/schemas/uniconfig.manager.compareconfigoutputfields.NodeResults'
      description: ""
    uniconfig.manager.health.Output:
      required:
      - healthy
      properties:
        message:
          type: string
          description: ""
        healthy:
          type: boolean
          description: ""
      description: ""
    uniconfig.manager.isinsync.Input:
      properties:
        target-nodes:
          $ref: uniconfig.manager.targetuniconfignodesfields.TargetNodes
      description: ""
    uniconfig.manager.isinsync.Output:
      properties:
        node-results:
          $ref: '#/components/schemas/uniconfig.manager.isinsyncoutputfields.NodeResults'
      description: ""
    uniconfig.manager.readproperties.Input:
      properties:
        property-keys:
          type: array
          description: Property keys from user
          items:
            type: string
      description: ""
    uniconfig.manager.readproperties.Output:
      required:
      - read-properties-status
      properties:
        properties-map:
          type: array
          description: Properties map name->value
          items:
            $ref: uniconfig.manager.targetuniconfigpropertiesfields.PropertiesMap
        read-properties-status:
          type: string
          description: Which properties are read and which are ignored.
      description: ""
    uniconfig.manager.replaceconfigwithoperational.Input:
      properties:
        target-nodes:
          $ref: uniconfig.manager.targetuniconfigunistorenodesfields.TargetNodes
      description: ""
    uniconfig.manager.syncfromnetwork.Input:
      properties:
        check-timestamp:
          type: boolean
          description: |-
            Perform timestamp comparison(last known to Uniconfig vs current timestamp on device)
            before loading all configuration from a device.
        target-nodes:
          $ref: uniconfig.manager.targetuniconfignodesfields.TargetNodes
      description: ""
    uniconfig.manager.synctonetwork.Input:
      properties:
        check-timestamp:
          type: boolean
          description: |-
            Perform timestamp comparison(last known to Uniconfig vs current timestamp on device)
            before loading all configuration from a device.
        do-confirmed-commit:
          type: boolean
          description: Option to enable/disable confirmed-commit at commit. Default
            value is true - confirmed-commit
        do-rollback:
          type: boolean
          description: |-
            Controls whether to roll back successfully configured devices in case of failure.
            Applies when configuring multiple devices within a single COMMIT RPC.
            By default, if N devices succeed, but the N+1 device fails,
            those N devices will be rolled back unless this option is set to false.
            The N+1 device will always be rolled back regardless of this option.
        target-nodes:
          $ref: uniconfig.manager.targetuniconfignodesfields.TargetNodes
        skip-unreachable-nodes:
          type: boolean
          description: "Option to skip nodes, that are unreachable at the time of\
            \ commit. Other nodes will be committed"
        do-validate:
          type: boolean
          description: Option to enable/disable validation at commit. Default value
            is true - validate
      description: ""
    uniconfig.manager.updateproperties.Input:
      properties:
        properties-map:
          type: array
          description: Properties map name->value
          items:
            $ref: uniconfig.manager.targetuniconfigpropertiesfields.PropertiesMap
      description: ""
    uniconfig.manager.updateproperties.Output:
      required:
      - update-properties-status
      properties:
        update-properties-status:
          type: string
          description: Updating properties or adding was successful or not.
      description: ""
    uniconfig.manager.validate.Input:
      properties:
        target-nodes:
          $ref: uniconfig.manager.targetuniconfignodesfields.TargetNodes
      description: ""
    uniconfig.query.queryconfig.Input:
      required:
      - jsonb-path-query
      - node-id
      - topology-id
      properties:
        jsonb-path-query:
          type: string
          description: |-
            JSON-path used for selection and filtering of elements inside node configuration.
            Only elements that are selected by this path are returned in the RPC output.
        node-id:
          type: string
          description: Node identifier.
        topology-id:
          type: string
          description: Topology identifier.
      description: ""
    uniconfig.query.queryconfig.Output:
      properties:
        config:
          type: array
          description: All JSON elements returned by input JSON path.
          items:
            type: object
      description: ""
    unitopo.translate.registry.AvailableUnitopoDeviceTranslations:
      properties:
        unit:
          type: array
          description: ""
          items:
            $ref: '#/components/schemas/unitopo.translate.registry.availableunitopodevicetranslations.Unit'
      description: ""
    unitopo.translate.registry.availableunitopodevicetranslations.Unit:
      properties:
        models:
          $ref: '#/components/schemas/unitopo.translate.registry.translationunit.Models'
        underlay-models:
          $ref: '#/components/schemas/unitopo.translate.registry.availableunitopodevicetranslations.unit.UnderlayModels'
        id:
          type: string
          description: ""
      description: ""
    yangextmount_configcoverage_body:
      properties:
        input:
          $ref: '#/components/schemas/cli.unit.generic.configcoverage.Input'
    inline_response_200:
      properties:
        output:
          $ref: '#/components/schemas/cli.unit.generic.configcoverage.Output'
    yangextmount_execute_body:
      properties:
        input:
          $ref: '#/components/schemas/cli.unit.generic.execute.Input'
    inline_response_200_1:
      properties:
        output:
          $ref: '#/components/schemas/cli.unit.generic.execute.Output'
    yangextmount_executeandexpect_body:
      properties:
        input:
          $ref: '#/components/schemas/cli.unit.generic.executeandexpect.Input'
    inline_response_200_2:
      properties:
        output:
          $ref: '#/components/schemas/cli.unit.generic.executeandexpect.Output'
    yangextmount_executeandread_body:
      properties:
        input:
          $ref: '#/components/schemas/cli.unit.generic.executeandread.Input'
    inline_response_200_3:
      properties:
        output:
          $ref: '#/components/schemas/cli.unit.generic.executeandread.Output'
    yangextmount_executeandreaduntil_body:
      properties:
        input:
          $ref: '#/components/schemas/cli.unit.generic.executeandreaduntil.Input'
    inline_response_200_4:
      properties:
        output:
          $ref: '#/components/schemas/cli.unit.generic.executeandreaduntil.Output'
    operations_dryrunmountnode_body:
      properties:
        input:
          $ref: '#/components/schemas/connection.manager.dryrunmountnode.Input'
    operations_checkinstallednodes_body:
      properties:
        input:
          $ref: '#/components/schemas/connection.manager.checkinstallednodes.Input'
    inline_response_200_5:
      properties:
        output:
          $ref: '#/components/schemas/connection.manager.checkinstallednodes.Output'
    operations_mountnode_body:
      properties:
        input:
          $ref: '#/components/schemas/connection.manager.mountnode.Input'
    operations_installmultiplenodes_body:
      properties:
        input:
          $ref: '#/components/schemas/connection.manager.installmultiplenodes.Input'
    operations_uninstallmultiplenodes_body:
      properties:
        input:
          $ref: '#/components/schemas/connection.manager.uninstallmultiplenodes.Input'
    operations_connectnode_body:
      properties:
        input:
          $ref: '#/components/schemas/connection.manager.connectnode.Input'
    operations_getinstallednodes_body:
      properties:
        input:
          $ref: '#/components/schemas/connection.manager.getinstallednodes.Input'
    inline_response_200_6:
      properties:
        output:
          $ref: '#/components/schemas/connection.manager.getinstallednodes.Output'
    operations_disconnectnode_body:
      properties:
        input:
          $ref: '#/components/schemas/connection.manager.disconnectnode.Input'
    operations_dryrununmountnode_body:
      properties:
        input:
          $ref: '#/components/schemas/connection.manager.dryrununmountnode.Input'
    operations_unmountnode_body:
      properties:
        input:
          $ref: '#/components/schemas/connection.manager.unmountnode.Input'
    operations_checknodesconnection_body:
      properties:
        input:
          $ref: '#/components/schemas/connection.manager.checknodesconnection.Input'
    operations_uninstallnode_body:
      properties:
        input:
          $ref: '#/components/schemas/connection.manager.uninstallnode.Input'
    operations_installnode_body:
      properties:
        input:
          $ref: '#/components/schemas/connection.manager.installnode.Input'
    operations_changeadminstate_body:
      properties:
        input:
          $ref: '#/components/schemas/connection.manager.changeadminstate.Input'
    operations_changeencryptionstatus_body:
      properties:
        input:
          $ref: '#/components/schemas/crypto.changeencryptionstatus.Input'
    inline_response_200_7:
      properties:
        output:
          $ref: '#/components/schemas/crypto.changeencryptionstatus.Output'
    operations_changeencryptionkeys_body:
      properties:
        input:
          $ref: '#/components/schemas/crypto.changeencryptionkeys.Input'
    inline_response_200_8:
      properties:
        output:
          $ref: '#/components/schemas/crypto.changeencryptionkeys.Output'
    operations_deletedatachangesubscription_body:
      properties:
        input:
          $ref: '#/components/schemas/data.change.events.deletedatachangesubscription.Input'
    operations_createdatachangesubscription_body:
      properties:
        input:
          $ref: '#/components/schemas/data.change.events.createdatachangesubscription.Input'
    inline_response_200_9:
      properties:
        output:
          $ref: '#/components/schemas/data.change.events.createdatachangesubscription.Output'
    operations_showsubscriptiondata_body:
      properties:
        input:
          $ref: '#/components/schemas/data.change.events.showsubscriptiondata.Input'
    inline_response_200_10:
      properties:
        output:
          $ref: '#/components/schemas/data.change.events.showsubscriptiondata.Output'
    operations_discover_body:
      properties:
        input:
          $ref: '#/components/schemas/device.discovery.discover.Input'
    inline_response_200_11:
      properties:
        output:
          $ref: '#/components/schemas/device.discovery.discover.Output'
    operations_dryruncommit_body:
      properties:
        input:
          $ref: '#/components/schemas/dryrun.manager.dryruncommit.Input'
    inline_response_200_12:
      properties:
        output:
          $ref: '#/components/schemas/dryrun.manager.dryruncommit.Output'
    operations_setmessagetypes_body:
      properties:
        input:
          $ref: '#/components/schemas/gnmi.logging.setmessagetypes.Input'
    operations_uploadyangmodel_body:
      properties:
        input:
          $ref: '#/components/schemas/gnmi.yang.storage.uploadyangmodel.Input'
    inline_response_200_13:
      properties:
        output:
          $ref: '#/components/schemas/journal.readjournal.Output'
    inline_response_200_14:
      properties:
        output:
          $ref: '#/components/schemas/journal.clearjournal.Output'
    operations_enabledefaultdevicelogging_body:
      properties:
        input:
          $ref: '#/components/schemas/logging.enabledefaultdevicelogging.Input'
    operations_disablelogging_body:
      properties:
        input:
          $ref: '#/components/schemas/logging.disablelogging.Input'
    operations_setglobalhiddentypes_body:
      properties:
        input:
          $ref: '#/components/schemas/logging.setglobalhiddentypes.Input'
    operations_disabledevicelogging_body:
      properties:
        input:
          $ref: '#/components/schemas/logging.disabledevicelogging.Input'
    operations_disabledefaultdevicelogging_body:
      properties:
        input:
          $ref: '#/components/schemas/logging.disabledefaultdevicelogging.Input'
    operations_enabledevicelogging_body:
      properties:
        input:
          $ref: '#/components/schemas/logging.enabledevicelogging.Input'
    operations_enablelogging_body:
      properties:
        input:
          $ref: '#/components/schemas/logging.enablelogging.Input'
    operations_addtrustedcertificate_body:
      properties:
        input:
          $ref: '#/components/schemas/netconf.keystore.addtrustedcertificate.Input'
    operations_removekeystoreentry_body:
      properties:
        input:
          $ref: '#/components/schemas/netconf.keystore.removekeystoreentry.Input'
    operations_addkeystoreentry_body:
      properties:
        input:
          $ref: '#/components/schemas/netconf.keystore.addkeystoreentry.Input'
    operations_removetrustedcertificate_body:
      properties:
        input:
          $ref: '#/components/schemas/netconf.keystore.removetrustedcertificate.Input'
    operations_addprivatekey_body:
      properties:
        input:
          $ref: '#/components/schemas/netconf.keystore.addprivatekey.Input'
    operations_removeprivatekey_body:
      properties:
        input:
          $ref: '#/components/schemas/netconf.keystore.removeprivatekey.Input'
    operations_createsubscription_body:
      properties:
        input:
          $ref: '#/components/schemas/notifications.createsubscription.Input'
    operations_sethiddenhttpheaders_body:
      properties:
        input:
          $ref: '#/components/schemas/restconf.logging.sethiddenhttpheaders.Input'
    operations_sethiddenhttpmethods_body:
      properties:
        input:
          $ref: '#/components/schemas/restconf.logging.sethiddenhttpmethods.Input'
    operations_registerrepository_body:
      properties:
        input:
          $ref: '#/components/schemas/schema.resources.registerrepository.Input'
    inline_response_200_15:
      properties:
        output:
          $ref: '#/components/schemas/schema.resources.registerrepository.Output'
    operations_deletesnapshot_body:
      properties:
        input:
          $ref: '#/components/schemas/snapshot.manager.deletesnapshot.Input'
    operations_createsnapshot_body:
      properties:
        input:
          $ref: '#/components/schemas/snapshot.manager.createsnapshot.Input'
    operations_replaceconfigwithsnapshot_body:
      properties:
        input:
          $ref: '#/components/schemas/snapshot.manager.replaceconfigwithsnapshot.Input'
    operations_copyonetoone_body:
      properties:
        input:
          $ref: '#/components/schemas/subtree.manager.copyonetoone.Input'
    operations_calculatesubtreediff_body:
      properties:
        input:
          $ref: '#/components/schemas/subtree.manager.calculatesubtreediff.Input'
    inline_response_200_16:
      properties:
        output:
          $ref: '#/components/schemas/subtree.manager.calculatesubtreediff.Output'
    operations_calculatesubtreegitlikediff_body:
      properties:
        input:
          $ref: '#/components/schemas/subtree.manager.calculatesubtreegitlikediff.Input'
    inline_response_200_17:
      properties:
        output:
          $ref: '#/components/schemas/subtree.manager.calculatesubtreegitlikediff.Output'
    operations_copyonetomany_body:
      properties:
        input:
          $ref: '#/components/schemas/subtree.manager.copyonetomany.Input'
    operations_copymanytoone_body:
      properties:
        input:
          $ref: '#/components/schemas/subtree.manager.copymanytoone.Input'
    operations_bulkedit_body:
      properties:
        input:
          $ref: '#/components/schemas/subtree.manager.bulkedit.Input'
    operations_applytemplate_body:
      properties:
        input:
          $ref: '#/components/schemas/template.manager.applytemplate.Input'
    operations_upgradetemplate_body:
      properties:
        input:
          $ref: '#/components/schemas/template.manager.upgradetemplate.Input'
    operations_gettemplateinfo_body:
      properties:
        input:
          $ref: '#/components/schemas/template.manager.gettemplateinfo.Input'
    inline_response_200_18:
      properties:
        output:
          $ref: '#/components/schemas/template.manager.gettemplateinfo.Output'
    inline_response_200_19:
      properties:
        output:
          $ref: '#/components/schemas/template.manager.gettemplatenodes.Output'
    operations_createmultipletemplates_body:
      properties:
        input:
          $ref: '#/components/schemas/template.manager.createmultipletemplates.Input'
    operations_revertchanges_body:
      properties:
        input:
          $ref: '#/components/schemas/transaction.log.revertchanges.Input'
    operations_syncfromnetwork_body:
      properties:
        input:
          $ref: '#/components/schemas/uniconfig.manager.syncfromnetwork.Input'
    operations_calculategitlikediff_body:
      properties:
        input:
          $ref: '#/components/schemas/uniconfig.manager.calculategitlikediff.Input'
    inline_response_200_20:
      properties:
        output:
          $ref: '#/components/schemas/uniconfig.manager.calculategitlikediff.Output'
    operations_updateproperties_body:
      properties:
        input:
          $ref: '#/components/schemas/uniconfig.manager.updateproperties.Input'
    inline_response_200_21:
      properties:
        output:
          $ref: '#/components/schemas/uniconfig.manager.updateproperties.Output'
    operations_isinsync_body:
      properties:
        input:
          $ref: '#/components/schemas/uniconfig.manager.isinsync.Input'
    inline_response_200_22:
      properties:
        output:
          $ref: '#/components/schemas/uniconfig.manager.isinsync.Output'
    operations_synctonetwork_body:
      properties:
        input:
          $ref: '#/components/schemas/uniconfig.manager.synctonetwork.Input'
    operations_readproperties_body:
      properties:
        input:
          $ref: '#/components/schemas/uniconfig.manager.readproperties.Input'
    inline_response_200_23:
      properties:
        output:
          $ref: '#/components/schemas/uniconfig.manager.readproperties.Output'
    inline_response_200_24:
      properties:
        output:
          $ref: '#/components/schemas/uniconfig.manager.health.Output'
    operations_validate_body:
      properties:
        input:
          $ref: '#/components/schemas/uniconfig.manager.validate.Input'
    operations_replaceconfigwithoperational_body:
      properties:
        input:
          $ref: '#/components/schemas/uniconfig.manager.replaceconfigwithoperational.Input'
    operations_commit_body:
      properties:
        input:
          $ref: '#/components/schemas/uniconfig.manager.commit.Input'
    inline_response_200_25:
      properties:
        output:
          $ref: '#/components/schemas/uniconfig.manager.commit.Output'
    operations_checkedcommit_body:
      properties:
        input:
          $ref: '#/components/schemas/uniconfig.manager.checkedcommit.Input'
    operations_calculatediff_body:
      properties:
        input:
          $ref: '#/components/schemas/uniconfig.manager.calculatediff.Input'
    inline_response_200_26:
      properties:
        output:
          $ref: '#/components/schemas/uniconfig.manager.calculatediff.Output'
    operations_compareconfig_body:
      properties:
        input:
          $ref: '#/components/schemas/uniconfig.manager.compareconfig.Input'
    inline_response_200_27:
      properties:
        output:
          $ref: '#/components/schemas/uniconfig.manager.compareconfig.Output'
    operations_queryconfig_body:
      properties:
        input:
          $ref: '#/components/schemas/uniconfig.query.queryconfig.Input'
    inline_response_200_28:
      properties:
        output:
          $ref: '#/components/schemas/uniconfig.query.queryconfig.Output'
    cli.translate.registry.errorretrypatterns.DefaultErrorRetryPatterns:
      title: cli.translate.registry.errorretrypatterns.DefaultErrorRetryPatterns
      properties:
        retry-pattern:
          type: array
          description: Device specific retry error patterns.
          items:
            type: string
      description: |-
        Device specific list of retry error patterns. This list is the primary source
        of error from device after which resend system is activated. This list can be overriden from the
        code.
    cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns:
      title: cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns
      properties:
        commit-error-pattern:
          type: array
          description: Device specific commit error patterns.
          items:
            type: string
      description: |-
        Device specific list of commit error patterns. The following list
        of patterns is checked in the input after 'commit' command is sent.
    cli.translate.registry.translationunit.models.Model:
      title: cli.translate.registry.translationunit.models.Model
      properties:
        implemented-rpcs:
          type: array
          description: ""
          items:
            type: string
        implemented-writers:
          type: array
          description: ""
          items:
            type: string
        id:
          type: string
          description: ""
        implemented-readers:
          type: array
          description: ""
          items:
            type: string
    cli.translate.registry.translationunit.Models:
      title: cli.translate.registry.translationunit.Models
      properties:
        model:
          type: array
          description: ""
          items:
            $ref: cli.translate.registry.translationunit.models.Model
      description: ""
    cli.translate.registry.availableclidevicetranslations.availableclidevicetranslation.units.Unit:
      title: cli.translate.registry.availableclidevicetranslations.availableclidevicetranslation.units.Unit
      properties:
        models:
          $ref: '#/components/schemas/cli.translate.registry.translationunit.Models'
        id:
          type: string
          description: ""
    cli.translate.registry.availableclidevicetranslations.availableclidevicetranslation.Units:
      title: cli.translate.registry.availableclidevicetranslations.availableclidevicetranslation.Units
      properties:
        unit:
          type: array
          description: ""
          items:
            $ref: cli.translate.registry.availableclidevicetranslations.availableclidevicetranslation.units.Unit
      description: ""
    cli.translate.registry.errorpatterns.DefaultErrorPatterns:
      title: cli.translate.registry.errorpatterns.DefaultErrorPatterns
      properties:
        error-pattern:
          type: array
          description: Device specific error patterns.
          items:
            type: string
      description: |-
        Device specific list of error patterns. This list is the primary source
        of error checking on the device. This list can be overridden from the code.
    uniconfig.manager.targetuniconfignodesfields.TargetNodes:
      title: uniconfig.manager.targetuniconfignodesfields.TargetNodes
      properties:
        node:
          type: array
          description: ""
          items:
            type: string
      description: ""
    connection.manager.getinstallednodesoutputfields.noderesults.NodeResult:
      title: connection.manager.getinstallednodesoutputfields.noderesults.NodeResult
      properties:
        node-id:
          type: string
          description: ""
        uniconfig-layer:
          type: boolean
          description: Indicates whether node is installed in UniConfig layer.
        topology-id:
          type: string
          description: ""
    connection.manager.getinstallednodesoutputfields.NodeResults:
      title: connection.manager.getinstallednodesoutputfields.NodeResults
      properties:
        node-result:
          type: array
          description: List of node identifiers.
          items:
            $ref: connection.manager.getinstallednodesoutputfields.noderesults.NodeResult
      description: Individual result of node identifiers for given nodes.
    cli.translate.registry.errorpatterns.DefaultErrorPatterns_1:
      title: cli.translate.registry.errorpatterns.DefaultErrorPatterns
      properties:
        cli-topology:error-pattern:
          type: array
          description: Device specific error patterns.
          items:
            type: string
      description: |-
        Device specific list of error patterns. This list is the primary source
        of error checking on the device. This list can be overridden from the code.
    cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns_1:
      title: cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns
      properties:
        cli-topology:commit-error-pattern:
          type: array
          description: Device specific commit error patterns.
          items:
            type: string
      description: |-
        Device specific list of commit error patterns. The following list
        of patterns is checked in the input after 'commit' command is sent.
    uniconfig.config.uniconfigconfignodefields.DeviceCrypto:
      title: uniconfig.config.uniconfigconfignodefields.DeviceCrypto
      properties:
        uniconfig-config:public-key-cipher-type:
          $ref: '#/components/schemas/uniconfig.config.PublicKeyCipherType'
        uniconfig-config:public-key-path:
          type: string
          description: Path to leaf containing public key in Base64 binary format.
      description: |-
        Settings related to encryption of arbitrary leaves/leaf-list using public key that
        is read from device on specified path.
    connection.manager.installmultiplenodes.input.nodes.Cli:
      title: connection.manager.installmultiplenodes.input.nodes.Cli
      properties:
        cli-topology:device-type:
          type: string
          description: ""
        uniconfig-config:confirmed-commit-enabled:
          type: boolean
          description: Specifies whether to send confirmed commit RPC between validate
            RPC and confirming commit.
        uniconfig-config:replace-paths:
          type: array
          description: Replace paths that point to config that should be handled as
            a one replace request
          items:
            type: string
        credentials:
          oneOf:
          - properties:
              cli-topology:username:
                type: string
                description: ""
              cli-topology:password:
                type: string
                description: ""
        cli-topology:resend-command-delay:
          maximum: 65535
          minimum: 0
          type: integer
          description: Delay between re-send commands.
          format: uint16
        keepalive-strategy:
          oneOf:
          - properties:
              cli-topology:keepalive-delay:
                maximum: 65535
                minimum: 0
                type: integer
                description: ""
                format: uint16
              cli-topology:keepalive-timeout:
                maximum: 65535
                minimum: 0
                type: integer
                description: ""
                format: uint16
              cli-topology:keepalive-initial-delay:
                maximum: 65535
                minimum: 0
                type: integer
                description: ""
                format: uint16
          - properties:
              cli-topology:command-timeout:
                maximum: 65535
                minimum: 0
                type: integer
                description: |-
                  Maximal time (in seconds) for command execution, if a command cannot be executed on
                  a device in this time, the execution is considered a failure
                format: uint16
              cli-topology:connection-establish-timeout:
                maximum: 65535
                minimum: 0
                type: integer
                description: |-
                  Maximal time (in seconds) for connection establishment, if a connection attempt does
                  not succeed in this time, the attempt is considered a failure
                format: uint16
              cli-topology:connection-lazy-timeout:
                maximum: 65535
                minimum: 0
                type: integer
                description: |-
                  Maximal time (in seconds) for connection to keep alive, if no activity was detected
                  in the session and the timeout has been reached, connection will be stopped
                format: uint16
        cli-topology:dry-run-journal-size:
          maximum: 65535
          minimum: 0
          type: integer
          description: |-
            Size of the DRY RUN cli mountpoint jounral. DRY RUN journal captures commands that would be
            executed when reading/writing some configuration. However the commands are not actually sent
            to the device
          format: uint16
        uniconfig-config:store-failed-installation:
          type: boolean
          description: "In case UniConfig fails to install the device, it will still\
            \ populate the database."
        cli-topology:max-connection-attempts-install:
          maximum: 4294967295
          minimum: 0
          type: integer
          description: |-
            Maximum number of connection attempts used during installation of device.
            Value 0 disables the limit
          format: uint32
        privileged-mode-credentials:
          oneOf:
          - properties:
              cli-topology:secret:
                type: string
                description: |-
                  Privileged EXEC mode password for Cisco IOS devices. If not set credentials
                  password will be used
        cli-topology:max-resend-command-attempt:
          maximum: 4294967295
          minimum: 0
          type: integer
          description: |-
            Maximum number of re-send commands that are sent to device after first attempt.
            Value 0 disables resending.
          format: uint32
        cli-topology:max-reconnection-attempts:
          maximum: 4294967295
          minimum: 0
          type: integer
          description: |-
            Maximum number of reconnect retries. Non positive value or null is interpreted as infinity.
            This is an optional parameter. If set, max-connection-attempts will be used only once,
            for the first connection attempts and for any subsequent disconnect-connect cycles,
            max-reconnect-attempts will be used. This enables users using different amount of reconnects
            for initial attempts vs subsequent reconnects.
          format: uint32
        uniconfig-config:install-uniconfig-node-enabled:
          type: boolean
          description: ""
        cli-topology:device-version:
          type: string
          description: ""
        cli-topology:max-connection-attempts:
          maximum: 4294967295
          minimum: 0
          type: integer
          description: |-
            Maximum number of connection attempts before connection initialization is marked as failed.
            Value 0 disables this limit.
          format: uint32
        uniconfig-config:admin-state:
          $ref: '#/components/schemas/uniconfig.config.AdminState'
        cli-topology:pass-through:
          title: cli.topology.clinodeconnectionstatus.PassThrough
          properties: {}
          description: |-
            When the underlying node is connected, its cli context
            is available verbatim under this container through the
            mount extension.
        cli-topology:host:
          type: string
          description: ""
        cli-topology:default-error-patterns:
          $ref: '#/components/schemas/cli.translate.registry.errorpatterns.DefaultErrorPatterns_1'
        cli-topology:transport-type:
          $ref: '#/components/schemas/cli.topology.TransportTypeEnumeration'
        uniconfig-config:store-without-mount:
          type: boolean
          description: In case we just want to store node metadata in the database
            without creating of mountpoint.
        uniconfig-config:validation-enabled:
          type: boolean
          description: Specifies whether to send validate RPC before commit RPC.
        cli-topology:default-commit-error-patterns:
          $ref: '#/components/schemas/cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns_1'
        cli-topology:journal-level:
          $ref: '#/components/schemas/cli.topology.JournalLevel'
        uniconfig-config:device-crypto:
          $ref: '#/components/schemas/uniconfig.config.uniconfigconfignodefields.DeviceCrypto'
        uniconfig-config:sequence-read-active:
          type: boolean
          description: Forces reading of data sequentially when mounting device.
        cli-topology:journal-size:
          maximum: 65535
          minimum: 0
          type: integer
          description: |-
            Size of the cli mountpoint jounral. Journal keeps track of executed commands and makes
            them available for users/apps for debugging purposes. Value 0 disables journaling
          format: uint16
        nodes:
          oneOf:
          - properties:
              uniconfig-config:blacklist:
                title: uniconfig.config.uniconfigconfignodefields.nodes.bl.Blacklist
                properties:
                  uniconfig-config:extension:
                    type: array
                    description: |-
                      List of extensions that mark top level containers/lists.
                      Example value: ["common:hidden true"]
                    items:
                      type: string
                  uniconfig-config:path:
                    type: array
                    description: |-
                      Only root schema nodes are supported. The path needs to be in URI format from RFC 8040.
                      e.g. ietf-interfaces:interfaces where ietf-interfaces is YANG module name and interfaces is root
                      container.
                    items:
                      type: string
                description: Reads which are not invoked for sync-from-network and
                  initial config read.
          - properties:
              uniconfig-config:whitelist:
                title: uniconfig.config.uniconfigconfignodefields.nodes.wl.Whitelist
                properties:
                  uniconfig-config:extension:
                    type: array
                    description: |-
                      List of extensions that mark top level containers/lists.
                      Example value: ["common:hidden true"]
                    items:
                      type: string
                  uniconfig-config:path:
                    type: array
                    description: |-
                      Only root schema nodes are supported. The path needs to be in URI format from RFC 8040.
                      e.g. ietf-interfaces:interfaces where ietf-interfaces is YANG module name and interfaces is root
                      container.
                    items:
                      type: string
                description: Reads which are invoked for sync-from-network and initial
                  config read.
        uniconfig-config:uniconfig-native-enabled:
          type: boolean
          description: ""
        cli-topology:port:
          maximum: 65535
          minimum: 0
          type: integer
          description: ""
          format: uint16
        cli-topology:parsing-engine:
          $ref: '#/components/schemas/cli.topology.ParsingEngine'
      description: CLI node settings.
    netconf.node.topology.netconfnodeconnectionparameters.NonModuleCapabilities:
      title: netconf.node.topology.netconfnodeconnectionparameters.NonModuleCapabilities
      properties:
        netconf-node-topology:override:
          type: boolean
          description: |-
            Whether to override or merge this list of non-module based capabilities with non-module
            based capabilities from device
        netconf-node-topology:capability:
          type: array
          description: |-
            Set a list of non-module based capabilities to override or merge non-module capabilities
            provided in device's hello message. Can be used for devices that do not report or
            incorrectly report non-module based capabilities in their hello message
          items:
            type: string
      description: ""
    netconf.node.topology.netconfnodeconnectionparameters.YangModuleCapabilities:
      title: netconf.node.topology.netconfnodeconnectionparameters.YangModuleCapabilities
      properties:
        netconf-node-topology:override:
          type: boolean
          description: Whether to override or merge this list of capabilities with
            capabilities from device
        netconf-node-topology:capability:
          type: array
          description: |-
            Set a list of capabilities to override capabilities provided in device's hello message.
            Can be used for devices that do not report any yang modules in their hello message
          items:
            type: string
      description: ""
    netconf.node.topology.netconfschemastorage.YangLibrary:
      title: netconf.node.topology.netconfschemastorage.YangLibrary
      properties:
        netconf-node-topology:password:
          type: string
          description: ""
        netconf-node-topology:yang-library-url:
          type: string
          description: Yang library to be plugged as additional source provider into
            the shared schema repository
        netconf-node-topology:username:
          type: string
          description: ""
      description: ""
    netconf.node.topology.netconfnodeconnectionparameters.OdlHelloMessageCapabilities:
      title: netconf.node.topology.netconfnodeconnectionparameters.OdlHelloMessageCapabilities
      properties:
        netconf-node-topology:capability:
          type: array
          description: |-
            Certain devices are non-accepting of ODL's hello message.  This allows specification of
            a custom ODL hello message based on a list of supported capabilities.
          items:
            type: string
      description: ""
    subscriptions.streamslist.Stream:
      title: subscriptions.streamslist.Stream
      required:
      - stream-name
      properties:
        subscriptions:mode:
          $ref: '#/components/schemas/subscriptions.ModeEnum'
        subscriptions:paths:
          type: array
          description: Paths to which subscribe on data change events
          items:
            type: string
        subscriptions:stop-time:
          type: string
          description: |-
            RFC5277: An optional parameter, <stopTime>, used with the optional replay feature to indicate the newest
            notifications of interest. If <stopTime> is not present, the notifications will continue until the
            subscription is terminated. Must be used with and be later than <startTime>. Values of <stopTime>
            in the future are valid.
        subscriptions:start-time:
          type: string
          description: |-
            RFC5277: A parameter, <startTime>, used to trigger the replay feature and indicate that the replay
            should start at the time specified. If <startTime> is not present, this is not a replay subscription.
            It is not valid to specify start times that are later than the current time. If the <startTime> specified
            is earlier than the log can support, the replay will begin with the earliest available notification.
        subscriptions:stream-name:
          type: string
          description: Identifier of the notification stream.
    connection.manager.installmultiplenodes.input.nodes.Netconf:
      title: connection.manager.installmultiplenodes.input.nodes.Netconf
      properties:
        netconf-node-topology:pass-through:
          title: netconf.node.topology.netconfnodeconnectionstatus.PassThrough
          properties: {}
          description: |-
            When the underlying node is connected, its NETCONF context
            is available verbatim under this container through the
            mount extension.
        uniconfig-config:confirmed-commit-enabled:
          type: boolean
          description: Specifies whether to send confirmed commit RPC between validate
            RPC and confirming commit.
        uniconfig-config:replace-paths:
          type: array
          description: Replace paths that point to config that should be handled as
            a one replace request
          items:
            type: string
        netconf-node-topology:non-module-capabilities:
          $ref: '#/components/schemas/netconf.node.topology.netconfnodeconnectionparameters.NonModuleCapabilities'
        netconf-node-topology:schemaless:
          type: boolean
          description: ""
        netconf-node-topology:tcp-only:
          type: boolean
          description: ""
        netconf-node-topology:yang-module-capabilities:
          $ref: '#/components/schemas/netconf.node.topology.netconfnodeconnectionparameters.YangModuleCapabilities'
        uniconfig-config:admin-state:
          $ref: '#/components/schemas/uniconfig.config.AdminState'
        credentials:
          oneOf:
          - properties:
              netconf-node-topology:key-based:
                title: netconf.node.topology.netconfnodecredentials.credentials.keyauth.KeyBased
                properties:
                  netconf-node-topology:key-id:
                    type: string
                    description: ""
                  netconf-node-topology:username:
                    type: string
                    description: ""
                description: ""
          - properties:
              netconf-node-topology:username:
                type: string
                description: ""
              netconf-node-topology:password:
                type: string
                description: ""
          - properties:
              netconf-node-topology:login-password:
                title: netconf.node.topology.netconfnodecredentials.credentials.loginpw.LoginPassword
                properties:
                  netconf-node-topology:password:
                    type: string
                    description: ""
                  netconf-node-topology:username:
                    type: string
                    description: ""
                description: ""
          - properties:
              netconf-node-topology:login-password-unencrypted:
                title: netconf.node.topology.netconfnodecredentials.credentials.loginpwunencrypted.LoginPasswordUnencrypted
                properties:
                  netconf-node-topology:password:
                    type: string
                    description: ""
                  netconf-node-topology:username:
                    type: string
                    description: ""
                description: ""
        netconf-parameters:
          oneOf:
          - properties:
              netconf-node-topology:session-timers:
                title: netconf.node.topology.netconfparametersgroups.SessionTimers
                properties:
                  netconf-node-topology:keepalive-delay:
                    maximum: 4294967295
                    minimum: 0
                    type: integer
                    description: |-
                      Netconf connector sends keepalive RPCs while the session is idle, this delay specifies the delay between keepalive RPC in seconds
                      If a value <1 is provided, no keepalives will be sent
                    format: uint32
                  netconf-node-topology:between-attempts-timeout:
                    maximum: 65535
                    minimum: 0
                    type: integer
                    description: |-
                      Initial timeout in seconds to wait between connection attempts.
                      Will be multiplied by reconenction-attempts-multiplier with every additional attempt
                    format: uint16
                  netconf-node-topology:max-reconnection-attempts:
                    maximum: 4294967295
                    minimum: 0
                    type: integer
                    description: |-
                      Maximum number of reconnect retries. Non positive value or null is interpreted as infinity.
                      This is an optional parameter. If set, max-connection-attempts will be used only once, for the first connection attempts
                      and for any subsequent disconnect-connect cycles, max-reconnect-attempts will be used.
                      This enables users using different amount of reconnects for initial attempts vs subsequent reconnects.
                    format: uint32
                  netconf-node-topology:initial-connection-timeout:
                    maximum: 4294967295
                    minimum: 0
                    type: integer
                    description: Specifies timeout in seconds after which connection
                      must be established.
                    format: uint32
                  netconf-node-topology:max-connection-attempts:
                    maximum: 4294967295
                    minimum: 0
                    type: integer
                    description: Maximum number of connection retries. Non positive
                      value or null is interpreted as infinity.
                    format: uint32
                  netconf-node-topology:reconnenction-attempts-multiplier:
                    maximum: 922337203685477600
                    minimum: -922337203685477600
                    type: number
                    description: |-
                      After each reconnection attempt, the delay between reconnection attempts is
                      multiplied by this factor. By default, it is set to 1.5. This means that the next
                      delay between attempts will be 3000 ms, then it will be 4500 ms, etc.
                  netconf-node-topology:confirm-commit-timeout:
                    maximum: 4294967295
                    minimum: 0
                    type: integer
                    description: Timeout period in seconds to issued commit after
                      confirmed-commit
                    format: uint32
                  netconf-node-topology:request-transaction-timeout:
                    maximum: 4294967295
                    minimum: 0
                    type: integer
                    description: Timeout in seconds for blocking operations within
                      transactions.
                    format: uint32
                description: ""
              netconf-node-topology:flags:
                title: netconf.node.topology.netconfparametersgroups.Flags
                properties:
                  netconf-node-topology:streaming-session:
                    type: boolean
                    description: |-
                      NETCONF session is created and optimized for receiving of NETCONF notifications
                      from remote server.
                  netconf-node-topology:enabled-strict-parsing:
                    type: boolean
                    description: |-
                      If this parameter is set to 'false', then parser should ignore unknown elements and not throw
                      exception during parsing.
                  netconf-node-topology:reconnect-on-changed-schema:
                    type: boolean
                    description: |-
                      If it is set to 'true', NETCONF notifications are supported by device, and NETCONF
                      notifications are enabled ('enabled-notifications' flag), the connector would auto
                      disconnect/reconnect when schemas are changed in the remote device. The connector subscribes
                      (right after connect) to base netconf notifications and listens
                      for netconf-capability-change notification
                  netconf-node-topology:enabled-notifications:
                    type: boolean
                    description: |-
                      If it is set to 'true' and NETCONF device supports notifications, NETCONF mountpoint will
                      expose NETCONF notification and subscription services.
                description: ""
              netconf-node-topology:other-parameters:
                title: netconf.node.topology.netconfparametersgroups.OtherParameters
                properties:
                  netconf-node-topology:edit-config-test-option:
                    $ref: '#/components/schemas/netconf.node.topology.EditConfigTestOption'
                  netconf-node-topology:dry-run-journal-size:
                    maximum: 65535
                    minimum: 0
                    type: integer
                    description: |-
                      Size of the DRY RUN netconf mountpoint journal. DRY RUN journal captures netconf RPCs that
                      would be executed when reading/writing some configuration. However the RPCs are not actually
                      sent to the device
                    format: uint16
                  netconf-node-topology:custom-connector-factory:
                    type: string
                    description: |-
                      Specification of the custom NETCONF connector factory. For example,
                                 if device doesn't support candidate data-store, this parameter
                                 should be set to 'netconf-customization-alu-ignore-candidate' string.
                  netconf-node-topology:concurrent-rpc-limit:
                    maximum: 65535
                    minimum: 0
                    type: integer
                    description: |-
                      Limit of concurrent messages that can be send before reply messages are received.
                      If value <1 is provided, no limit will be enforced
                    format: uint16
                description: ""
          - properties:
              netconf-node-topology:connection-timeout-millis:
                maximum: 4294967295
                minimum: 0
                type: integer
                description: Specifies timeout in milliseconds after which connection
                  must be established.
                format: uint32
              netconf-node-topology:default-request-timeout-millis:
                maximum: 4294967295
                minimum: 0
                type: integer
                description: Timeout in milliseconds for blocking operations within
                  transactions.
                format: uint32
              netconf-node-topology:between-attempts-timeout-millis:
                maximum: 65535
                minimum: 0
                type: integer
                description: Initial timeout in milliseconds to wait between connection
                  attempts. Will be multiplied by sleep-factor with every additional
                  attempt
                format: uint16
              netconf-node-topology:sleep-factor:
                maximum: 922337203685477600
                minimum: -922337203685477600
                type: number
                description: |-
                  After each reconnection attempt, the delay between reconnection attempts is
                  multiplied by this factor. By default, it is set to 1.5. This means that the next
                  delay between attempts will be 3000 ms, then it will be 4500 ms, etc.
              netconf-node-topology:confirm-timeout:
                maximum: 4294967295
                minimum: 0
                type: integer
                description: Timeout period in seconds to issued commit after confirmed-commit
                format: uint32
              netconf-node-topology:strict-parsing:
                type: boolean
                description: |-
                  If this parameter is set to 'false', then parser should ignore unknown elements and not throw
                  exception during parsing.
              netconf-node-topology:customization-factory:
                type: string
                description: |-
                  Specification of the custom NETCONF connector factory. For example,
                  if device doesn't support candidate data-store, this parameter
                  should be set to 'netconf-customization-alu-ignore-candidate' string.
              netconf-node-topology:concurrent-rpc-limit:
                maximum: 65535
                minimum: 0
                type: integer
                description: |-
                  Limit of concurrent messages that can be send before reply messages are received.
                  If value <1 is provided, no limit will be enforced
                format: uint16
              netconf-node-topology:edit-config-test-option:
                $ref: '#/components/schemas/netconf.node.topology.EditConfigTestOption'
              netconf-node-topology:dry-run-journal-size:
                maximum: 65535
                minimum: 0
                type: integer
                description: |-
                  Size of the DRY RUN netconf mountpoint journal. DRY RUN journal captures netconf RPCs that
                  would be executed when reading/writing some configuration. However the RPCs are not actually
                  sent to the device
                format: uint16
              netconf-node-topology:max-connection-attempts:
                maximum: 4294967295
                minimum: 0
                type: integer
                description: Maximum number of connection retries. Non positive value
                  or null is interpreted as infinity.
                format: uint32
              netconf-node-topology:max-reconnection-attempts:
                maximum: 4294967295
                minimum: 0
                type: integer
                description: |-
                  Maximum number of reconnect retries. Non positive value or null is interpreted as infinity.
                  This is an optional parameter. If set, max-connection-attempts will be used only once, for the first connection attempts
                  and for any subsequent disconnect-connect cycles, max-reconnect-attempts will be used.
                  This enables users using different amount of reconnects for initial attempts vs subsequent reconnects.
                format: uint32
              netconf-node-topology:keepalive-delay:
                maximum: 4294967295
                minimum: 0
                type: integer
                description: |-
                  Netconf connector sends keepalive RPCs while the session is idle, this delay specifies the delay between keepalive RPC in seconds
                  If a value <1 is provided, no keepalives will be sent
                format: uint32
              netconf-node-topology:enabled-notifications:
                type: boolean
                description: |-
                  If it is set to 'true' and NETCONF device supports notifications, NETCONF mountpoint will
                  expose NETCONF notification and subscription services.
              netconf-node-topology:reconnect-on-changed-schema:
                type: boolean
                description: |-
                  If it is set to 'true', NETCONF notifications are supported by device, and NETCONF
                  notifications are enabled ('enabled-notifications' flag), the connector would auto
                  disconnect/reconnect when schemas are changed in the remote device. The connector subscribes
                  (right after connect) to base netconf notifications and listens
                  for netconf-capability-change notification
              netconf-node-topology:streaming-session:
                type: boolean
                description: |-
                  NETCONF session is created and optimized for receiving of NETCONF notifications
                  from remote server.
        uniconfig-config:store-without-mount:
          type: boolean
          description: In case we just want to store node metadata in the database
            without creating of mountpoint.
        netconf-node-topology:port:
          maximum: 65535
          minimum: 0
          type: integer
          description: ""
          format: uint16
        netconf-node-topology:yang-library:
          $ref: '#/components/schemas/netconf.node.topology.netconfschemastorage.YangLibrary'
        uniconfig-config:validation-enabled:
          type: boolean
          description: Specifies whether to send validate RPC before commit RPC.
        netconf-node-topology:odl-hello-message-capabilities:
          $ref: '#/components/schemas/netconf.node.topology.netconfnodeconnectionparameters.OdlHelloMessageCapabilities'
        uniconfig-config:device-crypto:
          $ref: uniconfig.config.uniconfigconfignodefields.DeviceCrypto
        uniconfig-config:sequence-read-active:
          type: boolean
          description: Forces reading of data sequentially when mounting device.
        uniconfig-config:store-failed-installation:
          type: boolean
          description: "In case UniConfig fails to install the device, it will still\
            \ populate the database."
        nodes:
          oneOf:
          - properties:
              uniconfig-config:blacklist:
                title: uniconfig.config.uniconfigconfignodefields.nodes.bl.Blacklist
                properties:
                  uniconfig-config:extension:
                    type: array
                    description: |-
                      List of extensions that mark top level containers/lists.
                      Example value: ["common:hidden true"]
                    items:
                      type: string
                  uniconfig-config:path:
                    type: array
                    description: |-
                      Only root schema nodes are supported. The path needs to be in URI format from RFC 8040.
                      e.g. ietf-interfaces:interfaces where ietf-interfaces is YANG module name and interfaces is root
                      container.
                    items:
                      type: string
                description: Reads which are not invoked for sync-from-network and
                  initial config read.
          - properties:
              uniconfig-config:whitelist:
                title: uniconfig.config.uniconfigconfignodefields.nodes.wl.Whitelist
                properties:
                  uniconfig-config:extension:
                    type: array
                    description: |-
                      List of extensions that mark top level containers/lists.
                      Example value: ["common:hidden true"]
                    items:
                      type: string
                  uniconfig-config:path:
                    type: array
                    description: |-
                      Only root schema nodes are supported. The path needs to be in URI format from RFC 8040.
                      e.g. ietf-interfaces:interfaces where ietf-interfaces is YANG module name and interfaces is root
                      container.
                    items:
                      type: string
                description: Reads which are invoked for sync-from-network and initial
                  config read.
        netconf-node-topology:host:
          type: string
          description: ""
        subscriptions:stream:
          type: array
          description: List of available streams to which subscription can be created.
          items:
            $ref: subscriptions.streamslist.Stream
        uniconfig-config:uniconfig-native-enabled:
          type: boolean
          description: ""
        uniconfig-config:install-uniconfig-node-enabled:
          type: boolean
          description: ""
        netconf-node-topology:schema-cache-directory:
          type: string
          description: |-
            The destination schema repository for yang files relative to the cache directory.  This may be specified per netconf mount
            so that the loaded yang files are stored to a distinct directory to avoid potential conflict.
      description: NETCONF node settings.
    gnmi.topology.flagsgrouping.Flags_1:
      title: gnmi.topology.flagsgrouping.Flags
      properties:
        gnmi-topology:enabled-notifications:
          type: boolean
          description: |-
            If it is set to 'true' and GNMI device supports notifications, GNMI mountpoint will
            expose GNMI notification and subscription services.
      description: ""
    gnmi.topology.otherparametersgrouping.OtherParameters_1:
      title: gnmi.topology.otherparametersgrouping.OtherParameters
      properties:
        gnmi-topology:dry-run-journal-size:
          maximum: 65535
          minimum: 0
          type: integer
          description: |-
            Size of the DRY RUN gnmi mountpoint journal. DRY RUN journal captures gnmi operations that
            would be executed when reading/writing some configuration. However the operations are not actually
            sent to the device
          format: uint16
      description: ""
    gnmi.topology.credentials.Credentials:
      title: gnmi.topology.credentials.Credentials
      properties:
        gnmi-topology:password:
          type: string
          description: specify the target password as part of the user credentials.
        gnmi-topology:username:
          type: string
          description: specify the target username as part of the user credentials.
      description: ""
    gnmi.topology.gnmiconnectionparameters.ConnectionParameters:
      title: gnmi.topology.gnmiconnectionparameters.ConnectionParameters
      properties:
        gnmi-topology:host:
          type: string
          description: IP address or hostname of the target
        gnmi-topology:device-type:
          type: string
          description: Specific type of gNMI device
        security-choice:
          oneOf:
          - properties:
              gnmi-topology:connection-type:
                $ref: '#/components/schemas/gnmi.topology.ConnectionTypeEnumeration'
          - properties:
              gnmi-topology:keystore-id:
                type: string
                description: Identifier to keystore. Keystore is defined in gnmi-certificate-storage
                  model.
        gnmi-topology:port:
          maximum: 65535
          minimum: 0
          type: integer
          description: The port number on which to contact the target
          format: uint16
        gnmi-topology:credentials:
          $ref: '#/components/schemas/gnmi.topology.credentials.Credentials'
      description: ""
    gnmi.topology.gnmidependencypaths.DependencyPaths:
      title: gnmi.topology.gnmidependencypaths.DependencyPaths
      properties:
        gnmi-topology:after:
          type: string
          description: |-
            Specific path that should be handled after the 'before' leaf.
            Exact matches as well as subtrees of this path will be ordered
        gnmi-topology:before:
          type: string
          description: |-
            Specific path that should be handled before the 'after' leaf.
            Exact matches as well as subtrees of this path will be ordered
    gnmi.topology.sessiontimersgrouping.SessionTimers_1:
      title: gnmi.topology.sessiontimersgrouping.SessionTimers
      properties:
        gnmi-topology:request-max-size:
          maximum: 33554432
          minimum: 0
          type: integer
          description: |-
            The maximum size of a request in bytes. The maximum size of this leaf is
            32 mebibytes (33554432).
          format: uint32
        gnmi-topology:internal-transaction-timeout:
          maximum: 65535
          minimum: 0
          type: integer
          description: |-
            Timeout for internal data broker transactions (Not uniconfig transaction).
            Transaction times out if not completed in X seconds.
          format: uint16
        gnmi-topology:request-timeout:
          maximum: 65535
          minimum: 0
          type: integer
          description: Timeout for each gnmi request. Request times out if not completed
            in X seconds.
          format: uint16
      description: ""
    gnmi.topology.gnmiconnectionparameters.extensionsparameters.GnmiParameters:
      title: gnmi.topology.gnmiconnectionparameters.extensionsparameters.GnmiParameters
      properties:
        gnmi-topology:path-target:
          type: string
          description: |-
            The path-target field is used to specify the context of
            a particular stream of data. The data stream can be intended
            for individual target datastores. Only set in prefix for a path.
            This field MUST only ever be present on prefix paths in
            the corresponding request and response messages.
            This field is optional for clients. REF:gNMI Specification Section 2.2.2.1
        gnmi-topology:use-model-name-prefix:
          type: boolean
          description: |-
            Some devices require a module prefix in first element name
            of gNMI request path (e.g interfaces -> openconfig-interfaces:interfaces).
            When flag use-model-name-prefix is set to true for device, YIID will be
            transformed into gNMI path where elements have their module name.
            E.g. element interfaces from module openconfig-interfaces will be
            transformed as openconfig-interfaces:interfaces
      description: ""
    gnmi.topology.gnmiconnectionparameters.ExtensionsParameters:
      title: gnmi.topology.gnmiconnectionparameters.ExtensionsParameters
      properties:
        gnmi-topology:gnmi-parameters:
          $ref: '#/components/schemas/gnmi.topology.gnmiconnectionparameters.extensionsparameters.GnmiParameters'
        force:
          oneOf:
          - properties:
              gnmi-force-capabilities:force-cached-capabilities:
                maxItems: 1
                minItems: 1
                type: array
                description: Use all YANG models from cache directory
                items:
                  type: string
                  nullable: true
          - properties:
              gnmi-force-capabilities:force-capability:
                type: array
                description: |-
                  List of capabilities that restrict the
                  use of the models. The client restricts the set of data
                  models to be used when interacting with the target.
                  The target must not utilize data tree elements that
                  are defined in schema modules outside the specified list
                  of capabilities.
                items:
                  title: gnmi.force.capabilities.forceyangmodels.force.forcecapability.ForceCapability
                  properties:
                    gnmi-force-capabilities:name:
                      type: string
                      description: Name of the yang model
                    gnmi-force-capabilities:version:
                      type: string
                      description: Version of the yang model
      description: |-
        Defines a set of extensions parameters which can be optionally
        included with the request and response messages of gNMI RPCs.
        Allows registration of extensions defined outside of this package.
    connection.manager.installmultiplenodes.input.nodes.Gnmi:
      title: connection.manager.installmultiplenodes.input.nodes.Gnmi
      properties:
        uniconfig-config:confirmed-commit-enabled:
          type: boolean
          description: Specifies whether to send confirmed commit RPC between validate
            RPC and confirming commit.
        uniconfig-config:replace-paths:
          type: array
          description: Replace paths that point to config that should be handled as
            a one replace request
          items:
            type: string
        gnmi-topology:flags:
          $ref: '#/components/schemas/gnmi.topology.flagsgrouping.Flags_1'
        gnmi-topology:all-type-paths:
          type: array
          description: Paths that should be read with the ALL data type
          items:
            type: string
        uniconfig-config:admin-state:
          $ref: '#/components/schemas/uniconfig.config.AdminState'
        gnmi-topology:other-parameters:
          $ref: '#/components/schemas/gnmi.topology.otherparametersgrouping.OtherParameters_1'
        gnmi-topology:update-paths:
          type: array
          description: ""
          items:
            type: string
        gnmi-topology:connection-parameters:
          $ref: '#/components/schemas/gnmi.topology.gnmiconnectionparameters.ConnectionParameters'
        gnmi-topology:dependency-paths:
          type: array
          description: ""
          items:
            $ref: gnmi.topology.gnmidependencypaths.DependencyPaths
        uniconfig-config:store-without-mount:
          type: boolean
          description: In case we just want to store node metadata in the database
            without creating of mountpoint.
        uniconfig-config:validation-enabled:
          type: boolean
          description: Specifies whether to send validate RPC before commit RPC.
        gnmi-topology:session-timers:
          $ref: '#/components/schemas/gnmi.topology.sessiontimersgrouping.SessionTimers_1'
        gnmi-topology:node-state:
          title: gnmi.topology.gnminodestate.NodeState
          properties: {}
          description: ""
        uniconfig-config:device-crypto:
          $ref: uniconfig.config.uniconfigconfignodefields.DeviceCrypto
        uniconfig-config:sequence-read-active:
          type: boolean
          description: Forces reading of data sequentially when mounting device.
        gnmi-topology:extensions-parameters:
          $ref: '#/components/schemas/gnmi.topology.gnmiconnectionparameters.ExtensionsParameters'
        uniconfig-config:store-failed-installation:
          type: boolean
          description: "In case UniConfig fails to install the device, it will still\
            \ populate the database."
        nodes:
          oneOf:
          - properties:
              uniconfig-config:blacklist:
                title: uniconfig.config.uniconfigconfignodefields.nodes.bl.Blacklist
                properties:
                  uniconfig-config:extension:
                    type: array
                    description: |-
                      List of extensions that mark top level containers/lists.
                      Example value: ["common:hidden true"]
                    items:
                      type: string
                  uniconfig-config:path:
                    type: array
                    description: |-
                      Only root schema nodes are supported. The path needs to be in URI format from RFC 8040.
                      e.g. ietf-interfaces:interfaces where ietf-interfaces is YANG module name and interfaces is root
                      container.
                    items:
                      type: string
                description: Reads which are not invoked for sync-from-network and
                  initial config read.
          - properties:
              uniconfig-config:whitelist:
                title: uniconfig.config.uniconfigconfignodefields.nodes.wl.Whitelist
                properties:
                  uniconfig-config:extension:
                    type: array
                    description: |-
                      List of extensions that mark top level containers/lists.
                      Example value: ["common:hidden true"]
                    items:
                      type: string
                  uniconfig-config:path:
                    type: array
                    description: |-
                      Only root schema nodes are supported. The path needs to be in URI format from RFC 8040.
                      e.g. ietf-interfaces:interfaces where ietf-interfaces is YANG module name and interfaces is root
                      container.
                    items:
                      type: string
                description: Reads which are invoked for sync-from-network and initial
                  config read.
        gnmi-topology:schema-cache-directory:
          type: string
          description: The destination schema repository for yang files relative to
            the cache directory.
        subscriptions:stream:
          type: array
          description: List of available streams to which subscription can be created.
          items:
            $ref: subscriptions.streamslist.Stream
        gnmi-topology:remove-module-names-paths:
          type: array
          description: ""
          items:
            type: string
        uniconfig-config:uniconfig-native-enabled:
          type: boolean
          description: ""
        uniconfig-config:install-uniconfig-node-enabled:
          type: boolean
          description: ""
      description: gNMI node settings.
    connection.manager.installmultiplenodes.input.nodes.Snmp:
      title: connection.manager.installmultiplenodes.input.nodes.Snmp
      properties:
        snmp-topology:connection-retries:
          maximum: 65535
          minimum: 0
          type: integer
          description: |-
            The number of retries. Note: If the number of
            retries is set to 0, then the request will be sent
            out exactly once.
          format: uint16
        snmp-topology:port:
          maximum: 65535
          minimum: 0
          type: integer
          description: The host of the target.
          format: uint16
        security-model:
          oneOf:
          - properties:
              snmp-topology:auth-no-priv:
                title: snmp.topology.security.securitymodel.authnoprivcase.AuthNoPriv
                properties:
                  snmp-topology:security-name:
                    type: string
                    description: The security name that is also specified on the device.
                  snmp-topology:authentication-password:
                    type: string
                    description: Authentication password that is also specified on
                      the device.
                  snmp-topology:authentication-protocol:
                    $ref: '#/components/schemas/snmp.topology.AuthenticationProtocolEnumeration'
                description: ""
          - properties:
              snmp-topology:auth-priv:
                title: snmp.topology.security.securitymodel.authprivcase.AuthPriv
                properties:
                  snmp-topology:authentication-password:
                    type: string
                    description: Authentication password that is also specified on
                      the device.
                  snmp-topology:security-name:
                    type: string
                    description: The security name that is also specified on the device.
                  snmp-topology:privacy-protocol:
                    $ref: '#/components/schemas/snmp.topology.PrivacyProtocolEnumeration'
                  snmp-topology:privacy-password:
                    type: string
                    description: Privacy password that is also specified on the device.
                  snmp-topology:authentication-protocol:
                    $ref: '#/components/schemas/snmp.topology.AuthenticationProtocolEnumeration'
                description: ""
          - properties:
              snmp-topology:no-auth-no-priv:
                title: snmp.topology.security.securitymodel.noauthnoprivcase.NoAuthNoPriv
                properties:
                  snmp-topology:community-string:
                    type: string
                    description: |-
                      Sets the community octet string. This is a convenience
                      method to set the security name for community based
                      SNMP (v1 and v2c).
                description: ""
        snmp-topology:request-timeout:
          maximum: 4294967295
          minimum: 0
          type: integer
          description: |-
            Timeout in milliseconds before a confirmed request
            is resent or timed out.
          format: uint32
        snmp-topology:snmp-version:
          $ref: '#/components/schemas/snmp.topology.SnmpVersionEnumeration'
        snmp-topology:transport-type:
          $ref: '#/components/schemas/snmp.topology.TransportTypeEnumeration'
        snmp-topology:host:
          type: string
          description: The port of the target.
        snmp-topology:mib-repository:
          type: string
          description: |-
            The destination repository for mib files relative
            to the mibs directory.
      description: SNMP node settings.
    connection.manager.installmultiplenodes.input.Nodes:
      title: connection.manager.installmultiplenodes.input.Nodes
      required:
      - node-id
      properties:
        node-id:
          type: string
          description: Node identifier of CLI/NETCONF/GNMI node.
        cli:
          $ref: '#/components/schemas/connection.manager.installmultiplenodes.input.nodes.Cli'
        netconf:
          $ref: '#/components/schemas/connection.manager.installmultiplenodes.input.nodes.Netconf'
        gnmi:
          $ref: '#/components/schemas/connection.manager.installmultiplenodes.input.nodes.Gnmi'
        snmp:
          $ref: '#/components/schemas/connection.manager.installmultiplenodes.input.nodes.Snmp'
    connection.manager.installnode.input.Cli:
      title: connection.manager.installnode.input.Cli
      properties:
        cli-topology:device-type:
          type: string
          description: ""
        uniconfig-config:confirmed-commit-enabled:
          type: boolean
          description: Specifies whether to send confirmed commit RPC between validate
            RPC and confirming commit.
        uniconfig-config:replace-paths:
          type: array
          description: Replace paths that point to config that should be handled as
            a one replace request
          items:
            type: string
        credentials:
          oneOf:
          - properties:
              cli-topology:username:
                type: string
                description: ""
              cli-topology:password:
                type: string
                description: ""
        cli-topology:resend-command-delay:
          maximum: 65535
          minimum: 0
          type: integer
          description: Delay between re-send commands.
          format: uint16
        keepalive-strategy:
          oneOf:
          - properties:
              cli-topology:keepalive-delay:
                maximum: 65535
                minimum: 0
                type: integer
                description: ""
                format: uint16
              cli-topology:keepalive-timeout:
                maximum: 65535
                minimum: 0
                type: integer
                description: ""
                format: uint16
              cli-topology:keepalive-initial-delay:
                maximum: 65535
                minimum: 0
                type: integer
                description: ""
                format: uint16
          - properties:
              cli-topology:command-timeout:
                maximum: 65535
                minimum: 0
                type: integer
                description: |-
                  Maximal time (in seconds) for command execution, if a command cannot be executed on
                  a device in this time, the execution is considered a failure
                format: uint16
              cli-topology:connection-establish-timeout:
                maximum: 65535
                minimum: 0
                type: integer
                description: |-
                  Maximal time (in seconds) for connection establishment, if a connection attempt does
                  not succeed in this time, the attempt is considered a failure
                format: uint16
              cli-topology:connection-lazy-timeout:
                maximum: 65535
                minimum: 0
                type: integer
                description: |-
                  Maximal time (in seconds) for connection to keep alive, if no activity was detected
                  in the session and the timeout has been reached, connection will be stopped
                format: uint16
        cli-topology:dry-run-journal-size:
          maximum: 65535
          minimum: 0
          type: integer
          description: |-
            Size of the DRY RUN cli mountpoint jounral. DRY RUN journal captures commands that would be
            executed when reading/writing some configuration. However the commands are not actually sent
            to the device
          format: uint16
        uniconfig-config:store-failed-installation:
          type: boolean
          description: "In case UniConfig fails to install the device, it will still\
            \ populate the database."
        cli-topology:max-connection-attempts-install:
          maximum: 4294967295
          minimum: 0
          type: integer
          description: |-
            Maximum number of connection attempts used during installation of device.
            Value 0 disables the limit
          format: uint32
        privileged-mode-credentials:
          oneOf:
          - properties:
              cli-topology:secret:
                type: string
                description: |-
                  Privileged EXEC mode password for Cisco IOS devices. If not set credentials
                  password will be used
        cli-topology:max-resend-command-attempt:
          maximum: 4294967295
          minimum: 0
          type: integer
          description: |-
            Maximum number of re-send commands that are sent to device after first attempt.
            Value 0 disables resending.
          format: uint32
        cli-topology:max-reconnection-attempts:
          maximum: 4294967295
          minimum: 0
          type: integer
          description: |-
            Maximum number of reconnect retries. Non positive value or null is interpreted as infinity.
            This is an optional parameter. If set, max-connection-attempts will be used only once,
            for the first connection attempts and for any subsequent disconnect-connect cycles,
            max-reconnect-attempts will be used. This enables users using different amount of reconnects
            for initial attempts vs subsequent reconnects.
          format: uint32
        uniconfig-config:install-uniconfig-node-enabled:
          type: boolean
          description: ""
        cli-topology:device-version:
          type: string
          description: ""
        cli-topology:max-connection-attempts:
          maximum: 4294967295
          minimum: 0
          type: integer
          description: |-
            Maximum number of connection attempts before connection initialization is marked as failed.
            Value 0 disables this limit.
          format: uint32
        uniconfig-config:admin-state:
          $ref: '#/components/schemas/uniconfig.config.AdminState'
        cli-topology:pass-through:
          title: cli.topology.clinodeconnectionstatus.PassThrough
          properties: {}
          description: |-
            When the underlying node is connected, its cli context
            is available verbatim under this container through the
            mount extension.
        cli-topology:host:
          type: string
          description: ""
        cli-topology:default-error-patterns:
          $ref: cli.translate.registry.errorpatterns.DefaultErrorPatterns_1
        cli-topology:transport-type:
          $ref: '#/components/schemas/cli.topology.TransportTypeEnumeration'
        uniconfig-config:store-without-mount:
          type: boolean
          description: In case we just want to store node metadata in the database
            without creating of mountpoint.
        uniconfig-config:validation-enabled:
          type: boolean
          description: Specifies whether to send validate RPC before commit RPC.
        cli-topology:default-commit-error-patterns:
          $ref: cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns_1
        cli-topology:journal-level:
          $ref: '#/components/schemas/cli.topology.JournalLevel'
        uniconfig-config:device-crypto:
          $ref: uniconfig.config.uniconfigconfignodefields.DeviceCrypto
        uniconfig-config:sequence-read-active:
          type: boolean
          description: Forces reading of data sequentially when mounting device.
        cli-topology:journal-size:
          maximum: 65535
          minimum: 0
          type: integer
          description: |-
            Size of the cli mountpoint jounral. Journal keeps track of executed commands and makes
            them available for users/apps for debugging purposes. Value 0 disables journaling
          format: uint16
        nodes:
          oneOf:
          - properties:
              uniconfig-config:blacklist:
                title: uniconfig.config.uniconfigconfignodefields.nodes.bl.Blacklist
                properties:
                  uniconfig-config:extension:
                    type: array
                    description: |-
                      List of extensions that mark top level containers/lists.
                      Example value: ["common:hidden true"]
                    items:
                      type: string
                  uniconfig-config:path:
                    type: array
                    description: |-
                      Only root schema nodes are supported. The path needs to be in URI format from RFC 8040.
                      e.g. ietf-interfaces:interfaces where ietf-interfaces is YANG module name and interfaces is root
                      container.
                    items:
                      type: string
                description: Reads which are not invoked for sync-from-network and
                  initial config read.
          - properties:
              uniconfig-config:whitelist:
                title: uniconfig.config.uniconfigconfignodefields.nodes.wl.Whitelist
                properties:
                  uniconfig-config:extension:
                    type: array
                    description: |-
                      List of extensions that mark top level containers/lists.
                      Example value: ["common:hidden true"]
                    items:
                      type: string
                  uniconfig-config:path:
                    type: array
                    description: |-
                      Only root schema nodes are supported. The path needs to be in URI format from RFC 8040.
                      e.g. ietf-interfaces:interfaces where ietf-interfaces is YANG module name and interfaces is root
                      container.
                    items:
                      type: string
                description: Reads which are invoked for sync-from-network and initial
                  config read.
        uniconfig-config:uniconfig-native-enabled:
          type: boolean
          description: ""
        cli-topology:port:
          maximum: 65535
          minimum: 0
          type: integer
          description: ""
          format: uint16
        cli-topology:parsing-engine:
          $ref: '#/components/schemas/cli.topology.ParsingEngine'
      description: CLI node settings.
    connection.manager.installnode.input.Netconf:
      title: connection.manager.installnode.input.Netconf
      properties:
        netconf-node-topology:pass-through:
          title: netconf.node.topology.netconfnodeconnectionstatus.PassThrough
          properties: {}
          description: |-
            When the underlying node is connected, its NETCONF context
            is available verbatim under this container through the
            mount extension.
        uniconfig-config:confirmed-commit-enabled:
          type: boolean
          description: Specifies whether to send confirmed commit RPC between validate
            RPC and confirming commit.
        uniconfig-config:replace-paths:
          type: array
          description: Replace paths that point to config that should be handled as
            a one replace request
          items:
            type: string
        netconf-node-topology:non-module-capabilities:
          $ref: netconf.node.topology.netconfnodeconnectionparameters.NonModuleCapabilities
        netconf-node-topology:schemaless:
          type: boolean
          description: ""
        netconf-node-topology:tcp-only:
          type: boolean
          description: ""
        netconf-node-topology:yang-module-capabilities:
          $ref: netconf.node.topology.netconfnodeconnectionparameters.YangModuleCapabilities
        uniconfig-config:admin-state:
          $ref: '#/components/schemas/uniconfig.config.AdminState'
        credentials:
          oneOf:
          - properties:
              netconf-node-topology:key-based:
                title: netconf.node.topology.netconfnodecredentials.credentials.keyauth.KeyBased
                properties:
                  netconf-node-topology:key-id:
                    type: string
                    description: ""
                  netconf-node-topology:username:
                    type: string
                    description: ""
                description: ""
          - properties:
              netconf-node-topology:username:
                type: string
                description: ""
              netconf-node-topology:password:
                type: string
                description: ""
          - properties:
              netconf-node-topology:login-password:
                title: netconf.node.topology.netconfnodecredentials.credentials.loginpw.LoginPassword
                properties:
                  netconf-node-topology:password:
                    type: string
                    description: ""
                  netconf-node-topology:username:
                    type: string
                    description: ""
                description: ""
          - properties:
              netconf-node-topology:login-password-unencrypted:
                title: netconf.node.topology.netconfnodecredentials.credentials.loginpwunencrypted.LoginPasswordUnencrypted
                properties:
                  netconf-node-topology:password:
                    type: string
                    description: ""
                  netconf-node-topology:username:
                    type: string
                    description: ""
                description: ""
        netconf-parameters:
          oneOf:
          - properties:
              netconf-node-topology:session-timers:
                title: netconf.node.topology.netconfparametersgroups.SessionTimers
                properties:
                  netconf-node-topology:keepalive-delay:
                    maximum: 4294967295
                    minimum: 0
                    type: integer
                    description: |-
                      Netconf connector sends keepalive RPCs while the session is idle, this delay specifies the delay between keepalive RPC in seconds
                      If a value <1 is provided, no keepalives will be sent
                    format: uint32
                  netconf-node-topology:between-attempts-timeout:
                    maximum: 65535
                    minimum: 0
                    type: integer
                    description: |-
                      Initial timeout in seconds to wait between connection attempts.
                      Will be multiplied by reconenction-attempts-multiplier with every additional attempt
                    format: uint16
                  netconf-node-topology:max-reconnection-attempts:
                    maximum: 4294967295
                    minimum: 0
                    type: integer
                    description: |-
                      Maximum number of reconnect retries. Non positive value or null is interpreted as infinity.
                      This is an optional parameter. If set, max-connection-attempts will be used only once, for the first connection attempts
                      and for any subsequent disconnect-connect cycles, max-reconnect-attempts will be used.
                      This enables users using different amount of reconnects for initial attempts vs subsequent reconnects.
                    format: uint32
                  netconf-node-topology:initial-connection-timeout:
                    maximum: 4294967295
                    minimum: 0
                    type: integer
                    description: Specifies timeout in seconds after which connection
                      must be established.
                    format: uint32
                  netconf-node-topology:max-connection-attempts:
                    maximum: 4294967295
                    minimum: 0
                    type: integer
                    description: Maximum number of connection retries. Non positive
                      value or null is interpreted as infinity.
                    format: uint32
                  netconf-node-topology:reconnenction-attempts-multiplier:
                    maximum: 922337203685477600
                    minimum: -922337203685477600
                    type: number
                    description: |-
                      After each reconnection attempt, the delay between reconnection attempts is
                      multiplied by this factor. By default, it is set to 1.5. This means that the next
                      delay between attempts will be 3000 ms, then it will be 4500 ms, etc.
                  netconf-node-topology:confirm-commit-timeout:
                    maximum: 4294967295
                    minimum: 0
                    type: integer
                    description: Timeout period in seconds to issued commit after
                      confirmed-commit
                    format: uint32
                  netconf-node-topology:request-transaction-timeout:
                    maximum: 4294967295
                    minimum: 0
                    type: integer
                    description: Timeout in seconds for blocking operations within
                      transactions.
                    format: uint32
                description: ""
              netconf-node-topology:flags:
                title: netconf.node.topology.netconfparametersgroups.Flags
                properties:
                  netconf-node-topology:streaming-session:
                    type: boolean
                    description: |-
                      NETCONF session is created and optimized for receiving of NETCONF notifications
                      from remote server.
                  netconf-node-topology:enabled-strict-parsing:
                    type: boolean
                    description: |-
                      If this parameter is set to 'false', then parser should ignore unknown elements and not throw
                      exception during parsing.
                  netconf-node-topology:reconnect-on-changed-schema:
                    type: boolean
                    description: |-
                      If it is set to 'true', NETCONF notifications are supported by device, and NETCONF
                      notifications are enabled ('enabled-notifications' flag), the connector would auto
                      disconnect/reconnect when schemas are changed in the remote device. The connector subscribes
                      (right after connect) to base netconf notifications and listens
                      for netconf-capability-change notification
                  netconf-node-topology:enabled-notifications:
                    type: boolean
                    description: |-
                      If it is set to 'true' and NETCONF device supports notifications, NETCONF mountpoint will
                      expose NETCONF notification and subscription services.
                description: ""
              netconf-node-topology:other-parameters:
                title: netconf.node.topology.netconfparametersgroups.OtherParameters
                properties:
                  netconf-node-topology:edit-config-test-option:
                    $ref: '#/components/schemas/netconf.node.topology.EditConfigTestOption'
                  netconf-node-topology:dry-run-journal-size:
                    maximum: 65535
                    minimum: 0
                    type: integer
                    description: |-
                      Size of the DRY RUN netconf mountpoint journal. DRY RUN journal captures netconf RPCs that
                      would be executed when reading/writing some configuration. However the RPCs are not actually
                      sent to the device
                    format: uint16
                  netconf-node-topology:custom-connector-factory:
                    type: string
                    description: |-
                      Specification of the custom NETCONF connector factory. For example,
                                 if device doesn't support candidate data-store, this parameter
                                 should be set to 'netconf-customization-alu-ignore-candidate' string.
                  netconf-node-topology:concurrent-rpc-limit:
                    maximum: 65535
                    minimum: 0
                    type: integer
                    description: |-
                      Limit of concurrent messages that can be send before reply messages are received.
                      If value <1 is provided, no limit will be enforced
                    format: uint16
                description: ""
          - properties:
              netconf-node-topology:connection-timeout-millis:
                maximum: 4294967295
                minimum: 0
                type: integer
                description: Specifies timeout in milliseconds after which connection
                  must be established.
                format: uint32
              netconf-node-topology:default-request-timeout-millis:
                maximum: 4294967295
                minimum: 0
                type: integer
                description: Timeout in milliseconds for blocking operations within
                  transactions.
                format: uint32
              netconf-node-topology:between-attempts-timeout-millis:
                maximum: 65535
                minimum: 0
                type: integer
                description: Initial timeout in milliseconds to wait between connection
                  attempts. Will be multiplied by sleep-factor with every additional
                  attempt
                format: uint16
              netconf-node-topology:sleep-factor:
                maximum: 922337203685477600
                minimum: -922337203685477600
                type: number
                description: |-
                  After each reconnection attempt, the delay between reconnection attempts is
                  multiplied by this factor. By default, it is set to 1.5. This means that the next
                  delay between attempts will be 3000 ms, then it will be 4500 ms, etc.
              netconf-node-topology:confirm-timeout:
                maximum: 4294967295
                minimum: 0
                type: integer
                description: Timeout period in seconds to issued commit after confirmed-commit
                format: uint32
              netconf-node-topology:strict-parsing:
                type: boolean
                description: |-
                  If this parameter is set to 'false', then parser should ignore unknown elements and not throw
                  exception during parsing.
              netconf-node-topology:customization-factory:
                type: string
                description: |-
                  Specification of the custom NETCONF connector factory. For example,
                  if device doesn't support candidate data-store, this parameter
                  should be set to 'netconf-customization-alu-ignore-candidate' string.
              netconf-node-topology:concurrent-rpc-limit:
                maximum: 65535
                minimum: 0
                type: integer
                description: |-
                  Limit of concurrent messages that can be send before reply messages are received.
                  If value <1 is provided, no limit will be enforced
                format: uint16
              netconf-node-topology:edit-config-test-option:
                $ref: '#/components/schemas/netconf.node.topology.EditConfigTestOption'
              netconf-node-topology:dry-run-journal-size:
                maximum: 65535
                minimum: 0
                type: integer
                description: |-
                  Size of the DRY RUN netconf mountpoint journal. DRY RUN journal captures netconf RPCs that
                  would be executed when reading/writing some configuration. However the RPCs are not actually
                  sent to the device
                format: uint16
              netconf-node-topology:max-connection-attempts:
                maximum: 4294967295
                minimum: 0
                type: integer
                description: Maximum number of connection retries. Non positive value
                  or null is interpreted as infinity.
                format: uint32
              netconf-node-topology:max-reconnection-attempts:
                maximum: 4294967295
                minimum: 0
                type: integer
                description: |-
                  Maximum number of reconnect retries. Non positive value or null is interpreted as infinity.
                  This is an optional parameter. If set, max-connection-attempts will be used only once, for the first connection attempts
                  and for any subsequent disconnect-connect cycles, max-reconnect-attempts will be used.
                  This enables users using different amount of reconnects for initial attempts vs subsequent reconnects.
                format: uint32
              netconf-node-topology:keepalive-delay:
                maximum: 4294967295
                minimum: 0
                type: integer
                description: |-
                  Netconf connector sends keepalive RPCs while the session is idle, this delay specifies the delay between keepalive RPC in seconds
                  If a value <1 is provided, no keepalives will be sent
                format: uint32
              netconf-node-topology:enabled-notifications:
                type: boolean
                description: |-
                  If it is set to 'true' and NETCONF device supports notifications, NETCONF mountpoint will
                  expose NETCONF notification and subscription services.
              netconf-node-topology:reconnect-on-changed-schema:
                type: boolean
                description: |-
                  If it is set to 'true', NETCONF notifications are supported by device, and NETCONF
                  notifications are enabled ('enabled-notifications' flag), the connector would auto
                  disconnect/reconnect when schemas are changed in the remote device. The connector subscribes
                  (right after connect) to base netconf notifications and listens
                  for netconf-capability-change notification
              netconf-node-topology:streaming-session:
                type: boolean
                description: |-
                  NETCONF session is created and optimized for receiving of NETCONF notifications
                  from remote server.
        uniconfig-config:store-without-mount:
          type: boolean
          description: In case we just want to store node metadata in the database
            without creating of mountpoint.
        netconf-node-topology:port:
          maximum: 65535
          minimum: 0
          type: integer
          description: ""
          format: uint16
        netconf-node-topology:yang-library:
          $ref: netconf.node.topology.netconfschemastorage.YangLibrary
        uniconfig-config:validation-enabled:
          type: boolean
          description: Specifies whether to send validate RPC before commit RPC.
        netconf-node-topology:odl-hello-message-capabilities:
          $ref: netconf.node.topology.netconfnodeconnectionparameters.OdlHelloMessageCapabilities
        uniconfig-config:device-crypto:
          $ref: uniconfig.config.uniconfigconfignodefields.DeviceCrypto
        uniconfig-config:sequence-read-active:
          type: boolean
          description: Forces reading of data sequentially when mounting device.
        uniconfig-config:store-failed-installation:
          type: boolean
          description: "In case UniConfig fails to install the device, it will still\
            \ populate the database."
        nodes:
          oneOf:
          - properties:
              uniconfig-config:blacklist:
                title: uniconfig.config.uniconfigconfignodefields.nodes.bl.Blacklist
                properties:
                  uniconfig-config:extension:
                    type: array
                    description: |-
                      List of extensions that mark top level containers/lists.
                      Example value: ["common:hidden true"]
                    items:
                      type: string
                  uniconfig-config:path:
                    type: array
                    description: |-
                      Only root schema nodes are supported. The path needs to be in URI format from RFC 8040.
                      e.g. ietf-interfaces:interfaces where ietf-interfaces is YANG module name and interfaces is root
                      container.
                    items:
                      type: string
                description: Reads which are not invoked for sync-from-network and
                  initial config read.
          - properties:
              uniconfig-config:whitelist:
                title: uniconfig.config.uniconfigconfignodefields.nodes.wl.Whitelist
                properties:
                  uniconfig-config:extension:
                    type: array
                    description: |-
                      List of extensions that mark top level containers/lists.
                      Example value: ["common:hidden true"]
                    items:
                      type: string
                  uniconfig-config:path:
                    type: array
                    description: |-
                      Only root schema nodes are supported. The path needs to be in URI format from RFC 8040.
                      e.g. ietf-interfaces:interfaces where ietf-interfaces is YANG module name and interfaces is root
                      container.
                    items:
                      type: string
                description: Reads which are invoked for sync-from-network and initial
                  config read.
        netconf-node-topology:host:
          type: string
          description: ""
        subscriptions:stream:
          type: array
          description: List of available streams to which subscription can be created.
          items:
            $ref: subscriptions.streamslist.Stream
        uniconfig-config:uniconfig-native-enabled:
          type: boolean
          description: ""
        uniconfig-config:install-uniconfig-node-enabled:
          type: boolean
          description: ""
        netconf-node-topology:schema-cache-directory:
          type: string
          description: |-
            The destination schema repository for yang files relative to the cache directory.  This may be specified per netconf mount
            so that the loaded yang files are stored to a distinct directory to avoid potential conflict.
      description: NETCONF node settings.
    gnmi.topology.gnmiconnectionparameters.ConnectionParameters_1:
      title: gnmi.topology.gnmiconnectionparameters.ConnectionParameters
      properties:
        gnmi-topology:host:
          type: string
          description: IP address or hostname of the target
        gnmi-topology:device-type:
          type: string
          description: Specific type of gNMI device
        security-choice:
          oneOf:
          - properties:
              gnmi-topology:connection-type:
                $ref: '#/components/schemas/gnmi.topology.ConnectionTypeEnumeration'
          - properties:
              gnmi-topology:keystore-id:
                type: string
                description: Identifier to keystore. Keystore is defined in gnmi-certificate-storage
                  model.
        gnmi-topology:port:
          maximum: 65535
          minimum: 0
          type: integer
          description: The port number on which to contact the target
          format: uint16
        gnmi-topology:credentials:
          $ref: gnmi.topology.credentials.Credentials
      description: ""
    gnmi.topology.gnmiconnectionparameters.ExtensionsParameters_1:
      title: gnmi.topology.gnmiconnectionparameters.ExtensionsParameters
      properties:
        gnmi-topology:gnmi-parameters:
          $ref: gnmi.topology.gnmiconnectionparameters.extensionsparameters.GnmiParameters
        force:
          oneOf:
          - properties:
              gnmi-force-capabilities:force-cached-capabilities:
                maxItems: 1
                minItems: 1
                type: array
                description: Use all YANG models from cache directory
                items:
                  type: string
                  nullable: true
          - properties:
              gnmi-force-capabilities:force-capability:
                type: array
                description: |-
                  List of capabilities that restrict the
                  use of the models. The client restricts the set of data
                  models to be used when interacting with the target.
                  The target must not utilize data tree elements that
                  are defined in schema modules outside the specified list
                  of capabilities.
                items:
                  title: gnmi.force.capabilities.forceyangmodels.force.forcecapability.ForceCapability
                  properties:
                    gnmi-force-capabilities:name:
                      type: string
                      description: Name of the yang model
                    gnmi-force-capabilities:version:
                      type: string
                      description: Version of the yang model
      description: |-
        Defines a set of extensions parameters which can be optionally
        included with the request and response messages of gNMI RPCs.
        Allows registration of extensions defined outside of this package.
    connection.manager.installnode.input.Gnmi:
      title: connection.manager.installnode.input.Gnmi
      properties:
        uniconfig-config:confirmed-commit-enabled:
          type: boolean
          description: Specifies whether to send confirmed commit RPC between validate
            RPC and confirming commit.
        uniconfig-config:replace-paths:
          type: array
          description: Replace paths that point to config that should be handled as
            a one replace request
          items:
            type: string
        gnmi-topology:flags:
          $ref: gnmi.topology.flagsgrouping.Flags_1
        gnmi-topology:all-type-paths:
          type: array
          description: Paths that should be read with the ALL data type
          items:
            type: string
        uniconfig-config:admin-state:
          $ref: '#/components/schemas/uniconfig.config.AdminState'
        gnmi-topology:other-parameters:
          $ref: gnmi.topology.otherparametersgrouping.OtherParameters_1
        gnmi-topology:update-paths:
          type: array
          description: ""
          items:
            type: string
        gnmi-topology:connection-parameters:
          $ref: '#/components/schemas/gnmi.topology.gnmiconnectionparameters.ConnectionParameters_1'
        gnmi-topology:dependency-paths:
          type: array
          description: ""
          items:
            $ref: gnmi.topology.gnmidependencypaths.DependencyPaths
        uniconfig-config:store-without-mount:
          type: boolean
          description: In case we just want to store node metadata in the database
            without creating of mountpoint.
        uniconfig-config:validation-enabled:
          type: boolean
          description: Specifies whether to send validate RPC before commit RPC.
        gnmi-topology:session-timers:
          $ref: gnmi.topology.sessiontimersgrouping.SessionTimers_1
        gnmi-topology:node-state:
          title: gnmi.topology.gnminodestate.NodeState
          properties: {}
          description: ""
        uniconfig-config:device-crypto:
          $ref: uniconfig.config.uniconfigconfignodefields.DeviceCrypto
        uniconfig-config:sequence-read-active:
          type: boolean
          description: Forces reading of data sequentially when mounting device.
        gnmi-topology:extensions-parameters:
          $ref: '#/components/schemas/gnmi.topology.gnmiconnectionparameters.ExtensionsParameters_1'
        uniconfig-config:store-failed-installation:
          type: boolean
          description: "In case UniConfig fails to install the device, it will still\
            \ populate the database."
        nodes:
          oneOf:
          - properties:
              uniconfig-config:blacklist:
                title: uniconfig.config.uniconfigconfignodefields.nodes.bl.Blacklist
                properties:
                  uniconfig-config:extension:
                    type: array
                    description: |-
                      List of extensions that mark top level containers/lists.
                      Example value: ["common:hidden true"]
                    items:
                      type: string
                  uniconfig-config:path:
                    type: array
                    description: |-
                      Only root schema nodes are supported. The path needs to be in URI format from RFC 8040.
                      e.g. ietf-interfaces:interfaces where ietf-interfaces is YANG module name and interfaces is root
                      container.
                    items:
                      type: string
                description: Reads which are not invoked for sync-from-network and
                  initial config read.
          - properties:
              uniconfig-config:whitelist:
                title: uniconfig.config.uniconfigconfignodefields.nodes.wl.Whitelist
                properties:
                  uniconfig-config:extension:
                    type: array
                    description: |-
                      List of extensions that mark top level containers/lists.
                      Example value: ["common:hidden true"]
                    items:
                      type: string
                  uniconfig-config:path:
                    type: array
                    description: |-
                      Only root schema nodes are supported. The path needs to be in URI format from RFC 8040.
                      e.g. ietf-interfaces:interfaces where ietf-interfaces is YANG module name and interfaces is root
                      container.
                    items:
                      type: string
                description: Reads which are invoked for sync-from-network and initial
                  config read.
        gnmi-topology:schema-cache-directory:
          type: string
          description: The destination schema repository for yang files relative to
            the cache directory.
        subscriptions:stream:
          type: array
          description: List of available streams to which subscription can be created.
          items:
            $ref: subscriptions.streamslist.Stream
        gnmi-topology:remove-module-names-paths:
          type: array
          description: ""
          items:
            type: string
        uniconfig-config:uniconfig-native-enabled:
          type: boolean
          description: ""
        uniconfig-config:install-uniconfig-node-enabled:
          type: boolean
          description: ""
      description: gNMI node settings.
    connection.manager.installnode.input.Snmp:
      title: connection.manager.installnode.input.Snmp
      properties:
        snmp-topology:connection-retries:
          maximum: 65535
          minimum: 0
          type: integer
          description: |-
            The number of retries. Note: If the number of
            retries is set to 0, then the request will be sent
            out exactly once.
          format: uint16
        snmp-topology:port:
          maximum: 65535
          minimum: 0
          type: integer
          description: The host of the target.
          format: uint16
        security-model:
          oneOf:
          - properties:
              snmp-topology:auth-no-priv:
                title: snmp.topology.security.securitymodel.authnoprivcase.AuthNoPriv
                properties:
                  snmp-topology:security-name:
                    type: string
                    description: The security name that is also specified on the device.
                  snmp-topology:authentication-password:
                    type: string
                    description: Authentication password that is also specified on
                      the device.
                  snmp-topology:authentication-protocol:
                    $ref: '#/components/schemas/snmp.topology.AuthenticationProtocolEnumeration'
                description: ""
          - properties:
              snmp-topology:auth-priv:
                title: snmp.topology.security.securitymodel.authprivcase.AuthPriv
                properties:
                  snmp-topology:authentication-password:
                    type: string
                    description: Authentication password that is also specified on
                      the device.
                  snmp-topology:security-name:
                    type: string
                    description: The security name that is also specified on the device.
                  snmp-topology:privacy-protocol:
                    $ref: '#/components/schemas/snmp.topology.PrivacyProtocolEnumeration'
                  snmp-topology:privacy-password:
                    type: string
                    description: Privacy password that is also specified on the device.
                  snmp-topology:authentication-protocol:
                    $ref: '#/components/schemas/snmp.topology.AuthenticationProtocolEnumeration'
                description: ""
          - properties:
              snmp-topology:no-auth-no-priv:
                title: snmp.topology.security.securitymodel.noauthnoprivcase.NoAuthNoPriv
                properties:
                  snmp-topology:community-string:
                    type: string
                    description: |-
                      Sets the community octet string. This is a convenience
                      method to set the security name for community based
                      SNMP (v1 and v2c).
                description: ""
        snmp-topology:request-timeout:
          maximum: 4294967295
          minimum: 0
          type: integer
          description: |-
            Timeout in milliseconds before a confirmed request
            is resent or timed out.
          format: uint32
        snmp-topology:snmp-version:
          $ref: '#/components/schemas/snmp.topology.SnmpVersionEnumeration'
        snmp-topology:transport-type:
          $ref: '#/components/schemas/snmp.topology.TransportTypeEnumeration'
        snmp-topology:host:
          type: string
          description: The port of the target.
        snmp-topology:mib-repository:
          type: string
          description: |-
            The destination repository for mib files relative
            to the mibs directory.
      description: snmp node settings.
    connection.manager.uninstallmultiplenodesinputfields.Nodes:
      title: connection.manager.uninstallmultiplenodesinputfields.Nodes
      required:
      - node-id
      properties:
        node-id:
          type: string
          description: Node identifier of CLI/NETCONF/GNMI node.
        connection-type:
          $ref: '#/components/schemas/connection.manager.ConnectionType'
    device.discovery.inputport.TcpPort:
      title: device.discovery.inputport.TcpPort
      properties:
        type-of-port:
          oneOf:
          - properties:
              start-port:
                maximum: 65535
                minimum: 0
                type: integer
                description: ""
                format: uint16
              end-port:
                maximum: 65535
                minimum: 0
                type: integer
                description: ""
                format: uint16
          - properties:
              port:
                maximum: 65535
                minimum: 0
                type: integer
                description: ""
                format: uint16
    device.discovery.inputaddress.Address:
      title: device.discovery.inputaddress.Address
      properties:
        type-of-address:
          oneOf:
          - properties:
              hostname:
                type: string
                description: Domain name
          - properties:
              ip-address:
                type: string
                description: |-
                  IP address in either IPv4 or IPv6 format, the syntax
                  then determines which version is used
          - properties:
              start-ipv4-address:
                type: string
                description: ""
              end-ipv4-address:
                type: string
                description: ""
          - properties:
              start-ipv6-address:
                type: string
                description: ""
              end-ipv6-address:
                type: string
                description: ""
          - properties:
              network:
                type: string
                description: |-
                  IP address with a subnet mask either in IPv4 or IPv6 format,
                  the syntax then determines which version is used
    device.discovery.inputport.UdpPort:
      title: device.discovery.inputport.UdpPort
      properties:
        type-of-port:
          oneOf:
          - properties:
              start-port:
                maximum: 65535
                minimum: 0
                type: integer
                description: ""
                format: uint16
              end-port:
                maximum: 65535
                minimum: 0
                type: integer
                description: ""
                format: uint16
          - properties:
              port:
                maximum: 65535
                minimum: 0
                type: integer
                description: ""
                format: uint16
    device.discovery.discoveryoutputfields.Device:
      title: device.discovery.discoveryoutputfields.Device
      properties:
        host:
          type: string
          description: Host address either in IP (IPv4 or IPv6) format or in domain-name
            format
        unavailable-tcp-ports:
          type: array
          description: TCP ports that are unreachable
          items:
            maximum: 65535
            minimum: 0
            type: integer
            format: uint16
        is-host-reachable:
          type: boolean
          description: If the host is reachable or not using ICMP protocol
        available-tcp-ports:
          type: array
          description: All the available TCP ports
          items:
            maximum: 65535
            minimum: 0
            type: integer
            format: uint16
        unavailable-udp-ports:
          type: array
          description: UDP ports that are unreachable
          items:
            maximum: 65535
            minimum: 0
            type: integer
            format: uint16
        available-udp-ports:
          type: array
          description: All the available UDP ports
          items:
            maximum: 65535
            minimum: 0
            type: integer
            format: uint16
    dryrun.manager.dryruncommitoutputfields.noderesults.NodeResult:
      title: dryrun.manager.dryruncommitoutputfields.noderesults.NodeResult
      properties:
        node-id:
          type: string
          description: ""
        configuration:
          type: string
          description: |-
            Cli commands or netconf RPCs that needs to be executed
            on node to reach intended configuration state
    dryrun.manager.dryruncommitoutputfields.NodeResults:
      title: dryrun.manager.dryruncommitoutputfields.NodeResults
      properties:
        node-result:
          type: array
          description: |-
            Result of configuration and rollback on the given node.
            Rollback status is empty if rollback was not executed.
          items:
            $ref: dryrun.manager.dryruncommitoutputfields.noderesults.NodeResult
      description: Result of configuration and rollback on each configured network
        element.
    ietf.restconf.errors.errors.Error:
      title: ietf.restconf.errors.errors.Error
      required:
      - error-tag
      - error-type
      properties:
        error-path:
          type: string
          description: |-
            The YANG instance identifier associated
            with the error node.
        error-type:
          $ref: '#/components/schemas/ietf.restconf.ErrorTypeEnumeration'
        error-info:
          type: object
          description: |-
            This value MUST represent a JSON element with
            zero or more data nodes representing additional
            error information.
        error-message:
          type: string
          description: A message describing the error.
        error-tag:
          $ref: '#/components/schemas/ietf.restconf.ErrorTagEnumeration'
        error-app-tag:
          type: string
          description: The application-specific error-tag.
    netconf.keystore.keystoreentry.KeyCredential:
      title: netconf.keystore.keystoreentry.KeyCredential
      properties:
        key-id:
          type: string
          description: ""
        passphrase:
          type: string
          description: |-
            If the provided key is encrypted by a passphrase this needs to be included. Leave empty
            if the key does not have a passphrase.
            DO NOT write this directly into the datastore, use the provided rpc's as these will
            encrypt the passhprase before the entry is written into the datastore.
        private-key:
          type: string
          description: |-
            Base64 encoded private key that should be used for authentication with a netconf device.
            Do not include a public key as that is calculated from the private key.
            DO NOT write this directly into the datastore, use the provided rpc's as these will
            encrypt the key before the entry is written into the datastore.
    netconf.keystore.privatekeys.PrivateKey:
      title: netconf.keystore.privatekeys.PrivateKey
      properties:
        data:
          type: string
          description: Base64 encoded private key.
        name:
          type: string
          description: ""
        certificate-chain:
          type: array
          description: |-
            A certificate chain for this public key. Each certificate is an X.509 v3 certificate
            structure as specified by RFC5280, encoded using the Base64 format.
          items:
            type: string
    netconf.keystore.trustedcertificates.TrustedCertificate:
      title: netconf.keystore.trustedcertificates.TrustedCertificate
      properties:
        certificate:
          type: string
          description: |-
            An X.509 v3 certificate structure as specified by RFC5280, encoded using
            the Base64 format.
        name:
          type: string
          description: ""
    subtree.manager.bulkeditinputfields.Edit:
      title: subtree.manager.bulkeditinputfields.Edit
      required:
      - data
      - operation
      properties:
        data:
          type: object
          description: JSON-formatted subtree representing applied subtree configuration.
        path:
          type: string
          description: |-
            Path to modified subtree. Path must be complaint to RFC-8040 and relative
            to parent top-level node 'configuration' container.
        operation:
          $ref: '#/components/schemas/frinx.types.DataTreeOperation'
    subtree.manager.updateddata.UpdatedData:
      title: subtree.manager.updateddata.UpdatedData
      properties:
        path-actual:
          type: string
          description: Instance-identifier of updated data node.
        path-intended:
          type: string
          description: Instance-identifier of updated data node.
        data-intended:
          type: object
          description: ""
        data-actual:
          type: object
          description: ""
    subtree.manager.deleteddata.DeletedData:
      title: subtree.manager.deleteddata.DeletedData
      properties:
        data:
          type: object
          description: ""
        path:
          type: string
          description: Instance-identifier of deleted data node.
    subtree.manager.createddata.CreatedData:
      title: subtree.manager.createddata.CreatedData
      properties:
        data:
          type: object
          description: ""
        path:
          type: string
          description: Instance-identifier of created data node.
    template.manager.applytemplateinputfields.uniconfignode.Variable:
      title: template.manager.applytemplateinputfields.uniconfignode.Variable
      required:
      - leaf-list-values
      - leaf-value
      - typed-leaf-values
      properties:
        type:
          oneOf:
          - properties:
              leaf-list-values:
                type: array
                description: List of values that can be applied to the leaf-list.
                items:
                  type: string
          - properties:
              leaf-value:
                type: string
                description: Value that can be applied to leaf.
          - properties:
              typed-leaf-values:
                type: array
                description: ""
                items:
                  title: template.manager.applytemplateinputfields.uniconfignode.variable.type.typedleafvalues.TypedLeafValues
                  required:
                  - leaf-list-values
                  - leaf-value
                  properties:
                    type:
                      type: string
                      description: |-
                        Type qualifier for this value.
                        Used in case the same variable is used under different types
                    value:
                      oneOf:
                      - properties:
                          leaf-list-values:
                            type: array
                            description: List of values that can be applied to the
                              leaf-list.
                            items:
                              type: string
                      - properties:
                          leaf-value:
                            type: string
                            description: Value that can be applied to leaf.
        variable-id:
          type: string
          description: Variable identifier.
    template.manager.applytemplateinputfields.UniconfigNode:
      title: template.manager.applytemplateinputfields.UniconfigNode
      properties:
        uniconfig-node-id:
          type: string
          description: Identifier of the target Uniconfig node.
        variable:
          type: array
          description: List of variables with associated values.
          items:
            $ref: template.manager.applytemplateinputfields.uniconfignode.Variable
    template.manager.createmultipletemplatesinputfields.Templates:
      title: template.manager.createmultipletemplatesinputfields.Templates
      required:
      - template-configuration
      - template-name
      properties:
        template-configuration:
          type: object
          description: |-
            Template configuration without wrapping 'configuration' element
            (only content of template).
        yang-repository:
          type: string
          description: |-
            Name of yang-repository used for parsing of template configuration.
            It contains identifier of the YANG schema repository.
        template-name:
          type: string
          description: Identifier of the template.
    template.manager.createmultipletemplatesinputfields.Tags:
      title: template.manager.createmultipletemplatesinputfields.Tags
      properties:
        paths:
          type: array
          description: |-
            List of paths on which tag should be applied to. Paths must be specified as relative
            paths to root 'configuration' container and formatted based on RFC-8040 rules.
          items:
            type: string
        tag:
          $ref: '#/components/schemas/template.manager.TagIdentityref'
    template.manager.gettemplateinfooutputfields.variables.variable.basetypes.BaseType:
      title: template.manager.gettemplateinfooutputfields.variables.variable.basetypes.BaseType
      properties:
        type:
          type: string
          description: ""
        constraints:
          type: array
          description: ""
          items:
            type: string
    template.manager.gettemplateinfooutputfields.variables.variable.BaseTypes:
      title: template.manager.gettemplateinfooutputfields.variables.variable.BaseTypes
      properties:
        base-type:
          type: array
          description: ""
          items:
            $ref: template.manager.gettemplateinfooutputfields.variables.variable.basetypes.BaseType
      description: ""
    template.manager.gettemplateinfooutputfields.variables.variable.paths.Path:
      title: template.manager.gettemplateinfooutputfields.variables.variable.paths.Path
      properties:
        path:
          type: string
          description: ""
        path-description:
          type: string
          description: ""
        default-value:
          type: string
          description: ""
    template.manager.gettemplateinfooutputfields.variables.variable.Paths:
      title: template.manager.gettemplateinfooutputfields.variables.variable.Paths
      properties:
        path:
          type: array
          description: ""
          items:
            $ref: template.manager.gettemplateinfooutputfields.variables.variable.paths.Path
      description: ""
    template.manager.gettemplateinfooutputfields.variables.Variable:
      title: template.manager.gettemplateinfooutputfields.variables.Variable
      properties:
        base-types:
          $ref: '#/components/schemas/template.manager.gettemplateinfooutputfields.variables.variable.BaseTypes'
        variable-name:
          type: string
          description: ""
        type:
          type: string
          description: ""
        paths:
          $ref: '#/components/schemas/template.manager.gettemplateinfooutputfields.variables.variable.Paths'
        type-description:
          type: string
          description: ""
    template.manager.gettemplateinfooutputfields.Variables:
      title: template.manager.gettemplateinfooutputfields.Variables
      properties:
        variable:
          type: array
          description: ""
          items:
            $ref: template.manager.gettemplateinfooutputfields.variables.Variable
      description: ""
    transaction.data.transactionsdata.transactiondata.ChangedNodes:
      title: transaction.data.transactionsdata.transactiondata.ChangedNodes
      properties:
        node-id:
          type: string
          description: ""
        topology-id:
          type: string
          description: ""
    transaction.log.targetuuidsfields.TargetTransactions:
      title: transaction.log.targetuuidsfields.TargetTransactions
      properties:
        transaction:
          type: array
          description: ""
          items:
            type: string
      description: ""
    transaction.log.transactionentry.Diff:
      title: transaction.log.transactionentry.Diff
      properties:
        path:
          type: string
          description: Path to the modification.
        data-after:
          type: string
          description: Data after update.
        data-before:
          type: string
          description: Data before update.
    transaction.log.transactionsmetadata.transactionmetadata.Metadata:
      title: transaction.log.transactionsmetadata.transactionmetadata.Metadata
      properties:
        node-id:
          type: string
          description: Node identifier.
        topology:
          type: string
          description: Topology on which the node is located.
        diff:
          type: array
          description: List of modifications.
          items:
            $ref: transaction.log.transactionentry.Diff
    uniconfig.manager.targetuniconfigunistorenodesfields.TargetNodes:
      title: uniconfig.manager.targetuniconfigunistorenodesfields.TargetNodes
      properties:
        node:
          type: array
          description: ""
          items:
            type: string
      description: ""
    uniconfig.manager.nodecalculatediffresults.noderesult.DeletedData:
      title: uniconfig.manager.nodecalculatediffresults.noderesult.DeletedData
      properties:
        data:
          type: string
          description: ""
        path:
          type: string
          description: Instance-identifier of deleted data node.
    uniconfig.manager.nodecalculatediffresults.noderesult.CreatedData:
      title: uniconfig.manager.nodecalculatediffresults.noderesult.CreatedData
      properties:
        data:
          type: string
          description: ""
        path:
          type: string
          description: Instance-identifier of created data node.
    uniconfig.manager.nodecalculatediffresults.noderesult.UpdatedData:
      title: uniconfig.manager.nodecalculatediffresults.noderesult.UpdatedData
      properties:
        path:
          type: string
          description: Instance-identifier of updated data node.
        data-intended:
          type: string
          description: ""
        data-actual:
          type: string
          description: ""
    uniconfig.manager.nodecalculatediffresults.noderesult.ReorderedLists:
      title: uniconfig.manager.nodecalculatediffresults.noderesult.ReorderedLists
      properties:
        path:
          type: string
          description: Instance-identifier of reordered list.
        actual-list-keys:
          type: string
          description: ""
        intended-list-keys:
          type: string
          description: ""
    uniconfig.manager.nodecalculatediffresults.NodeResult:
      title: uniconfig.manager.nodecalculatediffresults.NodeResult
      properties:
        deleted-data:
          type: array
          description: Removed intended configuration against actual.
          items:
            $ref: uniconfig.manager.nodecalculatediffresults.noderesult.DeletedData
        node-id:
          type: string
          description: ""
        created-data:
          type: array
          description: Created intended configuration against actual.
          items:
            $ref: uniconfig.manager.nodecalculatediffresults.noderesult.CreatedData
        topology-id:
          type: string
          description: ""
        updated-data:
          type: array
          description: Updated intended configuration against actual.
          items:
            $ref: uniconfig.manager.nodecalculatediffresults.noderesult.UpdatedData
        reordered-lists:
          type: array
          description: Reordered intended list against actual.
          items:
            $ref: uniconfig.manager.nodecalculatediffresults.noderesult.ReorderedLists
    uniconfig.manager.calculatediffoutputfields.NodeResults:
      title: uniconfig.manager.calculatediffoutputfields.NodeResults
      properties:
        node-result:
          type: array
          description: Differences between intended and actual uniconfig node.
          items:
            $ref: uniconfig.manager.nodecalculatediffresults.NodeResult
      description: Individual result of calculate-diff for given nodes.
    uniconfig.manager.nodechanges.Changes:
      title: uniconfig.manager.nodechanges.Changes
      properties:
        data:
          type: string
          description: Changes on the specified path in a git like style.
        path:
          type: string
          description: Instance-identifier of updated data node.
    uniconfig.manager.nodecalculategitlikediffresults.NodeResult:
      title: uniconfig.manager.nodecalculategitlikediffresults.NodeResult
      properties:
        changes:
          type: array
          description: All changes that happened between intended and actual uniconfig
            node
          items:
            $ref: uniconfig.manager.nodechanges.Changes
        node-id:
          type: string
          description: ""
        topology-id:
          type: string
          description: ""
    uniconfig.manager.calculategitlikediffoutputfields.NodeResults:
      title: uniconfig.manager.calculategitlikediffoutputfields.NodeResults
      properties:
        node-result:
          type: array
          description: Differences between intended and actual uniconfig node in a
            git like style.
          items:
            $ref: uniconfig.manager.nodecalculategitlikediffresults.NodeResult
      description: Individual result of calculate-diff for given nodes.
    uniconfig.manager.compareconfigoutputfields.NodeResults:
      title: uniconfig.manager.compareconfigoutputfields.NodeResults
      properties:
        node-result:
          type: array
          description: Differences between intended and actual uniconfig node.
          items:
            $ref: uniconfig.manager.nodecalculatediffresults.NodeResult
      description: Individual result of configuration comparison for given nodes.
    uniconfig.manager.nodeisinsyncresults.NodeResult:
      title: uniconfig.manager.nodeisinsyncresults.NodeResult
      properties:
        node-id:
          type: string
          description: ""
        is-in-sync:
          type: boolean
          description: ""
    uniconfig.manager.isinsyncoutputfields.NodeResults:
      title: uniconfig.manager.isinsyncoutputfields.NodeResults
      properties:
        node-result:
          type: array
          description: Result of is-in-sync operation on the given node.
          items:
            $ref: uniconfig.manager.nodeisinsyncresults.NodeResult
      description: Result of checking if network elements are in-sync with operational
        datastore.
    uniconfig.manager.targetuniconfigpropertiesfields.PropertiesMap:
      title: uniconfig.manager.targetuniconfigpropertiesfields.PropertiesMap
      properties:
        name:
          type: string
          description: Identifies a unique property name
        value:
          type: string
          description: String property value
    unitopo.translate.registry.translationunit.models.Model:
      title: unitopo.translate.registry.translationunit.models.Model
      properties:
        implemented-rpcs:
          type: array
          description: ""
          items:
            type: string
        implemented-writers:
          type: array
          description: ""
          items:
            type: string
        id:
          type: string
          description: ""
        implemented-readers:
          type: array
          description: ""
          items:
            type: string
    unitopo.translate.registry.translationunit.Models:
      title: unitopo.translate.registry.translationunit.Models
      properties:
        model:
          type: array
          description: ""
          items:
            $ref: unitopo.translate.registry.translationunit.models.Model
      description: ""
    unitopo.translate.registry.availableunitopodevicetranslations.unit.underlaymodels.Model:
      title: unitopo.translate.registry.availableunitopodevicetranslations.unit.underlaymodels.Model
      properties:
        id:
          type: string
          description: ""
    unitopo.translate.registry.availableunitopodevicetranslations.unit.UnderlayModels:
      title: unitopo.translate.registry.availableunitopodevicetranslations.unit.UnderlayModels
      properties:
        model:
          type: array
          description: ""
          items:
            $ref: unitopo.translate.registry.availableunitopodevicetranslations.unit.underlaymodels.Model
      description: ""
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
